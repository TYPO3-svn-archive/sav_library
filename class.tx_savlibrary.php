<?php/****************************************************************  Copyright notice**  (c) 2009 Laurent Foulloy <yolf.typo3@orange.fr>*  All rights reserved**  This script is part of the TYPO3 project. The TYPO3 project is*  free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  The GNU General Public License can be found at*  http://www.gnu.org/copyleft/gpl.html.**  This script is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  This copyright notice MUST APPEAR in all copies of the script!***************************************************************//** * SAV Library: Common code for extensions generated by the SAV Library Extension * Generator. * * @author	Laurent Foulloy <yolf.typo3@orange.fr> * */require_once(PATH_tslib.'class.tslib_pibase.php');require_once (PATH_t3lib.'class.t3lib_tsparser.php');require_once ('class.utils.php');require_once ('class.tx_savlibrary_defaultVerifiers.php');require_once ('class.tx_savlibrary_defaultQueriers.php');require_once ('class.tx_savlibrary_defaultItemviewers.php');require_once ('class.tx_savlibrary_defaultViewers.php');require_once ('DatePicker/class.DatePicker.php');class tx_savlibrary {  // Debug constants  const DEBUG_NONE = 0;  const DEBUG_QUERY = 1;  const DEBUG_PERFORMANCE = 2;  // Constants used in caching  const CLOSE_BUTTON = 1;  const ARROWS_IN_FORM = 2;  const ARROWS_IN_SUBFORM = 4;  const PAGE_BROWSER_IN_FORM = 8;  const PAGE_BROWSER_IN_SUBFORM = 16;    // Constants used in admin methods  const NOBODY = 0;  const ALL = 1;  const ADMIN_PLUS_USER = 2;  const ALL_EXCLUDING_SUPER_ADMIN = 3;  // Variables in the calling classes 	public $extObj;                       // Reference to the extension object  protected $cObj;                      // Reference to the cObj in the extension  protected $extConfig;                 // Reference to the extension configuration  protected $extKey;                    // Extension Key  	public $viewers;                       // viewers object	public $queriers;                      // queriers object	public $itemviewers;                   // itemsviewers object	public $verifiers;                     // verifiers object	public $datePicker;                    // Date picker object		public $debug = self::DEBUG_NONE;      // Debug variable. Use debug ONLY for development.		protected $templateCode;               // Template code for savlibrary views	public $conf;                          // Configuration variables  public $formShortName;                 // Name of the form without the cObj id  public $formName;                      // Name of the form  public $tsConfigPluginName;            // Name of the plugin for page TSConfig (tx_ + extKey with no underscore)  protected $formNameHashAlgo = 'crc32'; // Default hash algorithm for form name  public $errorInForm = false;           // If true, a field error occured in the input form  protected $messages = array();         // Messages  protected $errors = array();           // Error messages    // Session variables  public $sessionExt = array();          // Extensions data  public $sessionFilter = array();       // Filters data  public $sessionFilterSelected = '';    // Selected filter key    // Variables for HTML outputs    	  public $EOL = '';                      // End of line for HTML output  public $TAB = '';                      // Tabulation  public $SPACE = '';                    // Space before element  public $WRAP = '';                     // String before wrapping    	public $formAction = '';               // Action to be performed  public $limit = 0;                     // Used with arrow button  public $limitSub = array();            // Limit for the sub form  public $folderTab = 0;                 // cryted folder tab id (cryted 0 if none)  public $uid = 0;        	             // uid of the current record	public $inputMode = 0;                 // Set if in inputMode  public $deleteConfirmed = 0;           // Set if delete is confirmed  public $isNewForm = false;             // Set if new form or sub form values were posted		public $formConfig;                    // configuration of the form	public $viewName;                      // Name of the current view		public $savlibraryConfig = array();    // Configuration of the savlibrary extension  (item viewers, viewers, data handlers)  public $rowItem;                       // Used in subForm views  public $rowItemFromButton;             // Used in subForm views to get the subitem uid from a button   public $fieldFromButton;               // Used in subForm views to get the field associated with a button  public $newSubForm = 0;                // New button has been activated in SubForm  public $subFormName = '';              // Field name associated with the subform  public $processSubForm = false;        // Flag set if a subform is processed  protected $fusion = 0;                 // For the fusion of cells  protected $fusionBegin = 0;            // For the fusion of cells  protected $fusionEnd = 0;              // For the fusion of cells  public $selectList = '';               // List of onclick actions for select multiple items  public $titleProcessed = false;        // Flag to process the form title only once  public $sameValueArray = array();      // Array to process the cutIfSameAsPrevious attribute    public $tableLocal = '';               // Local table name    public $internal = array();           // Internal array for page browser    // Directories  public $iconsDir;                      // icons directory  // Variable to encode/decode form parameters  protected $formParams = array (    'formAction',               // 0    'uid',                      // 1    'uidItem',                  // 2    'subFormName',              // 3    'field',                    // 4    'limit',                    // 5    'limitSub',                 // 6    'folderTab',                // 7    'where',                    // 8    'formName',                 // 9  );  // Variable to encode/decode form actions  protected $formActions = array (    'editBtn',                  // 0    'closeBtn',                 // 1    'showSingle',               // 2    'exportBtn',                // 3    'newBtn',                   // 4    'newBtnSubForm',            // 5    'leftArrowBtn',             // 6    'leftArrowBtnSubForm',      // 7    'rightArrowBtn',            // 8    'rightArrowBtnSubForm',     // 9    'changeFolderTab',          // 10    'deleteBtn',                // 11    'inputModeBtn',             // 12    'toggleModeBtn',            // 13    'printBtn',                 // 14    'helpBtn',                  // 15    'upBtn',                    // 16    'downBtn',                  // 17    'deleteItemBtn',            // 18    'browse',                   // 19    'browseSubForm',            // 20    'inputForm',                // 21    'updateForm',               // 22  );  /**   * Constructor   *    * @return none   */  public function __construct() {    $this->EOL = chr(10);     $this->TAB = chr(9);     $this->SPACE = '          ';    $this->WRAP = $this->EOL . $this->TAB . $this->TAB;  }               	/***************************************************************/	/* configuration methods                                       */	/***************************************************************/  /**   * Inits vars   *   * @param $ref (reference to the calling object)   *   * @return none   */  public function initVars(&$ref) {    $this->extObj = $ref;    $this->extConfig = &$ref->extConfig;    $this->cObj = &$ref->cObj;    $this->extKey = $ref->extKey;  }  /**   * Inits classes and set the reference to savlibrary   *   * @none   *   * @return none   */  public function initClasses() {    // Instanciates the classes and set the reference to savlibrary    $this->viewers = t3lib_div::makeInstance('tx_savlibrary_defaultViewers');    $this->viewers->initVars($this);    $this->queriers = t3lib_div::makeInstance('tx_savlibrary_defaultQueriers');    $this->queriers->initVars($this);    $this->itemviewers = t3lib_div::makeInstance('tx_savlibrary_defaultItemviewers');    $this->itemviewers->initVars($this);    $this->verifiers = t3lib_div::makeInstance('tx_savlibrary_defaultVerifiers');    $this->verifiers->initVars($this);        $this->datePicker = t3lib_div::makeInstance('DatePicker');  }  	/**	 * Initialization	 *	 * @param $conf array (configuration)	 * @param $flexform boolean (if true the configuration is obtained from the flexform)   *	 * @return boolean (true if no error occurs)	 */  protected function init($conf, $flexform = 1) {    // Checks if a global maintenance is requested    $temp = unserialize($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf']['sav_library']);    $maintenanceAllowedUsers = explode(',', $temp['maintenanceAllowedUsers']);    if ($temp['maintenance']) {      $this->addError('error.underMaintenance');      if (!in_array($GLOBALS['TSFE']->fe_user->user['uid'], $maintenanceAllowedUsers)) {        return false;               }    }    // Checks if a maintenance of the extension is requested    $temp = unserialize($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf'][$this->extKey]);    if ($temp['maintenance']) {      $this->addError('error.underMaintenance');      if (!in_array($GLOBALS['TSFE']->fe_user->user['uid'], $maintenanceAllowedUsers)) {        return false;               }    }    // Sets debug    if ($this->debug & self::DEBUG_QUERY) {      $GLOBALS['TYPO3_DB']->debugOutput = true;    }        // Instanciates the classes and set the reference to savlibrary    $this->initClasses();    // Checks the compatibility between the extension version and the library version.    // Versions are under the format x.y.z. Compatibility is satisfied if x's are the same    preg_match(      '/^([0-9])\./',      $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['sav_library']['version'],      $versionLibrary    );    preg_match(      '/^([0-9])\./',      $this->extConfig['version'],      $versionExt    );    if ($versionLibrary[1] != $versionExt[1]) {      $this->addError('error.incorrectVersion');      return false;    }		// Sets the configuration		$this->conf = $conf;				// Sets the form name hash algorithm		if(empty($this->conf['formNameHashAlgo'])) {      $this->conf['formNameHashAlgo'] = $this->formNameHashAlgo;    }  	    // Inits FlexForm configuration for plugin and get the configuration fields    if ($flexform) {      $this->extObj->pi_initPIflexForm();       if (!isset($this->cObj->data['pi_flexform']['data'])) {        $this->addError('error.incorrectPluginConfiguration_1', $this->extKey);        $this->addError('error.incorrectPluginConfiguration_2');        return false;      }      foreach ($this->cObj->data['pi_flexform']['data'] as $sheet => $data) {        foreach ($this->cObj->data['pi_flexform']['data'][$sheet]['lDEF'] as $key => $value) {  		    $this->conf[$key] = $this->extObj->pi_getFFvalue(            $this->cObj->data['pi_flexform'],            $key,            $sheet          );        }      }      // Sets the form ID      $formId = $this->conf['formId'];      if (!$formId) {        $this->addError('error.noFormSelectedInFlexform', $this->extKey);        return false;      }    } else {      $formId = 1;    }        // Sets the caching    if ($this->extConfig['forms'][$formId]['userPlugin']) {      // USER plugin      $this->extObj->pi_checkCHash = true;		  $this->extObj->pi_USER_INT_obj = 0;    } else {      // Gets the object type according to the TYPO3 version      if (t3lib_div::int_from_ver(TYPO3_version) < 4003000) {        $objectTypeUser = ux_tslib_cObj::OBJECTTYPE_USER;      } else {        $objectTypeUser = tslib_cObj::OBJECTTYPE_USER;      }      // Changes the plugin as a USER INT      if ($this->cObj->getUserObjectType() == $objectTypeUser) {  			$this->cObj->convertToUserIntObject();      }      $this->extObj->pi_checkCHash = false;		  $this->extObj->pi_USER_INT_obj = 1;    }    		$this->formConfig = array(		  'title' => $this->extConfig['forms'][$formId]['title'],      'showAll' => $this->extConfig['forms'][$formId]['showAllView'],      'showSingle' => $this->extConfig['forms'][$formId]['showSingleView'],      'inputForm' => $this->extConfig['forms'][$formId]['inputView'],      'updateForm' => $this->extConfig['forms'][$formId]['updateView'],      'altForm' => $this->extConfig['forms'][$formId]['altView'],      'query' => $this->extConfig['forms'][$formId]['query'],    );    // Sets the short form name (replace space and - by underscore)    $this->formShortName = $this->extKey . '_' .      strtr(strtolower($this->extConfig['forms'][$formId]['title']), ' -', '__');          // Sets the form name (add the uid of the cObj))    $this->formName = $this->formShortName . '_' .      $this->cObj->data['uid'];    // Sets the plgin name for page TSConfig    $this->tsConfigPluginName = 'tx_' . str_replace('_', '', $this->extKey);        // Sets the local table name    $this->tableLocal = $this->extConfig['queries'][$this->formConfig['query']]['tableLocal'];		  	// Adds the select List JavaScript to page header if a user is logged (intranet)		$this->path = t3lib_extMgm::siteRelPath('sav_library');		if (isset($GLOBALS['TSFE']->fe_user->user) && !$GLOBALS['TSFE']->additionalHeaderData['tx_savlibrary']) {	      $GLOBALS['TSFE']->additionalHeaderData['tx_savlibrary'] = $this->TAB .        '<script type="text/javascript" src="' .        t3lib_extMgm::siteRelPath('sav_library') .        'res/sav_library.js"></script>';		}  	// For a nice input of the date		if ($conf['dateSelectCss']) {      $this->datePicker->setDatePickerCssFile($conf['dateSelectCss']);    }    $this->datePicker->setAdditionalHeader();    // Includes the css file for the extension, if any    // The css file should be extension.css in the extension/res directory,    // where "extension" is the extension key		if (file_exists(t3lib_extMgm::extPath($this->extKey) . 'res/' . $this->extKey . '.css')) {      if (!$GLOBALS['TSFE']->additionalHeaderData[$this->extKey]) {        $GLOBALS['TSFE']->additionalHeaderData[$this->extKey] = $this->TAB .          '<link rel="stylesheet" type="text/css" href="' .          t3lib_extMgm::siteRelPath($this->extKey) .          'res/' . $this->extKey . '.css' . '" />';      }    }		// Sets the icon directory.    // The icon directory is taken from the configuration in TS if set,    // else from the res/icons folder in the extension if it exists,    // else from the default res/icons in the sav_library.		if ($this->conf['iconsDir']) {      $this->iconsDir = $this->conf['iconsDir'];    } elseif (file_exists(t3lib_extMgm::siteRelPath($this->extKey) . 'res/icons')) {      $this->iconsDir = t3lib_extMgm::siteRelPath($this->extKey) . 'res/icons/';    } else {		  $this->iconsDir = t3lib_extMgm::siteRelPath('sav_library') . 'res/icons/';		}		  	// Reads the template file.  	// The template file is defined by the configuration in TS if set,    // else it is the file extension.tmpl in the extension/res directory,    // where "extension" is the extension key, if it exits.  	// else it is the default file sav_library.tmpl in the sav_library/res directory.  	if ($this->conf['template'] && file_exists(PATH_site.$this->conf['template'])) {			$this->templateCode = $this->cObj->fileResource($this->conf['template']);    } elseif (file_exists(t3lib_extMgm::extPath($this->extKey) . 'res/' . $this->extKey . '.tmpl')) {			$this->templateCode = $this->cObj->fileResource('EXT:' . $this->extKey . '/res/' . $this->extKey . '.tmpl');		} elseif (file_exists(t3lib_extMgm::extPath('sav_library') . 'res/sav_library.tmpl')) {  			$this->templateCode = $this->cObj->fileResource('EXT:sav_library/res/sav_library.tmpl');		} else {        $this->addError('error.templateNeeded');        return false;		}  	// Reads the xml configutation xml    // The configuration file is taken in the sav_library/res directory.		if (file_exists(t3lib_extMgm::extPath('sav_library') . 'res/sav_library.xml')) {  		$xml = $this->cObj->fileResource('EXT:sav_library/res/sav_library.xml');		} else {      $this->addError('error.configurationNeeded');      return false;    }    // Sets the configuration of the library    $this->xmlToSavlibrayConfig($xml);    // Checks if SAV Library Extends is active    if (t3lib_extMgm::isLoaded('sav_library_extends')) {      $this->initExtends();    } 		return true;	}  /**   *  Sets the configuration for queriers, viewers and item viewers from xml   *     * @param $xml (xml configuration)   *    * @return none   */    public function xmlToSavlibrayConfig($xml) {    // Converts xml into array    $temp = t3lib_div::xml2array($xml);    reset($temp);    // Sets the queriers    foreach($temp['queriers'] as $key => $value) {      if (is_array($value)) {        foreach($value as $keyInArray => $valueInArray) {          if(trim($valueInArray)) {            $this->savlibraryConfig['queriers'][$key][$keyInArray] = trim($valueInArray);          }        }            } elseif (trim($value)) {        $this->savlibraryConfig['queriers'][$key] = trim($value);      }    }        // Sets the viewers    foreach($temp['viewers'] as $key => $value) {      if (trim($value)) {        $this->savlibraryConfig['viewers'][$key] = trim($value);      }    }    // Sets the item viewers    foreach ($temp['itemviewers'] as $name => $element) {      $x['name'] = $name;      $x['conditions'] = $element['conditions'];      $this->savlibraryConfig['itemviewers'][$element['type']][] = $x;    }          }               		/**	 * Calls the form generator. This should be called in the main function of the plugin class.	 *	 * @param $conf array (configuration)	 *	 * @return string (the whole content result)	 */	public function generateForm($conf){    // Starts the local performance counter in debug mode    if ($this->debug & self::DEBUG_PERFORMANCE) {      utils::startTimer($this->extKey, __FUNCTION__);    }    		if (!$this->init($conf)) {      return $this->extObj->pi_wrapInBaseClass($this->showErrors());        }    // Gets the init performance counter in debug mode    if ($this->debug & self::DEBUG_PERFORMANCE) {      $this->debugPerformance(__FUNCTION__, ' -> Init');      utils::startTimer($this->extKey, __FUNCTION__);    }    // Gets the session data    $this->sessionExt = $GLOBALS['TSFE']->fe_user->getKey('ses','ext');    $this->sessionFilter = $GLOBALS['TSFE']->fe_user->getKey('ses','filter');    $this->sessionFilterSelected = $GLOBALS['TSFE']->fe_user->getKey('ses','filterSelected');    // Checks if the extension was active, removed by an another extension and post values are sent    if (is_array($this->sessionExt) && !$this->sessionExt[$this->formName] && t3lib_div::_GP('sav_library') && is_array(t3lib_div::_POST($this->formName))) {      // Displays an error message, remove post and get data      $this->addError('error.notSavedElapsedTime');      unset($_POST[$this->formName]);      unset($_GET[$this->formName]);    }        // Sets the page id and the time stamp    $this->sessionExt[$this->formName]['pageID'] = $GLOBALS['TSFE']->id;    $this->sessionExt[$this->formName]['tstamp'] = time();       // Removes extensions which are too old    // extension validity is given in second (1 hour by default)    $extValidity = ($conf['extValidity '] ? $conf['extValidity '] : 1 ) * 3600;    reset($this->sessionExt);    foreach ($this->sessionExt as $keyExt => $valueExt) {      if (time() >  $valueExt['tstamp'] + $extValidity) {        unset($this->sessionExt[$keyExt]);      }    }    // Removes filters which are too old or which have a page id    // associated with no active extension    if ($this->sessionFilter) {      reset($this->sessionFilter);      foreach ($this->sessionFilter as $keyFilter => $valueFilter) {        if (time() > $valueFilter['tstamp'] + $extValidity) {          unset($this->sessionFilter[$keyFilter]);        } else {          $found = 0;          reset($this->sessionExt);          foreach ($this->sessionExt as $keyExt => $valueExt) {            if ($valueExt['pageID'] == $valueFilter['pageID']) {              $found = 1;              break;            }          }          if (!$found) {            unset($this->sessionFilter[$keyFilter]);          }        }      }    }             if (!t3lib_div::_GP('sav_library') || (t3lib_div::_GP('sav_library') && $this->sessionFilter[$this->sessionFilterSelected]['formAction'] == 'noDisplay')) {      $this->sessionExt[$this->formName] = array();      if (isset($this->sessionFilter)) {              // Removes filters in the same page which are not active,        //that is not selected or with the same contentID        reset($this->sessionFilter);        foreach ($this->sessionFilter as $keyFilter => $valueFilter) {          if ($keyFilter != $this->sessionFilterSelected &&               $valueFilter['pageID'] == $GLOBALS['TSFE']->id &&              $valueFilter['contentID'] != $this->sessionFilter[$this->sessionFilterSelected]['contentID']) {            unset($this->sessionFilter[$keyFilter]);          }        }                              if (!is_array($this->sessionFilter[$this->sessionFilterSelected])) {          unset($this->sessionFilterSelected);               } elseif (isset($this->sessionFilter[$this->sessionFilterSelected]['uid'])) {          // init uid. Used in special case          $this->uid = $this->sessionFilter[$this->sessionFilterSelected]['uid'];            $this->formAction = $this->sessionFilter[$this->sessionFilterSelected]['formAction'];            }      }    }                   // Checks the POST and GET variables    $extPOSTVars = t3lib_div::_POST($this->formName);    if ($extPOSTVars['updateBtn']) {      $this->fieldFromButton = key($extPOSTVars['updateBtn']);      $temp = current($extPOSTVars['updateBtn']);      unset($_POST[$this->formName]['updateBtn']);      unset($_POST[$this->formName]['formAction']);      $this->sessionExt[$this->formName]['formAction'] = 'updateBtn';      if (is_array($temp)) {        $this->rowItemFromButton = key($temp);      }    } elseif ($extPOSTVars['saveBtn']) {      unset($_POST[$this->formName]['saveBtn']);      unset($_POST[$this->formName]['formAction']);      $this->sessionExt[$this->formName]['formAction'] = 'saveBtn';    } elseif ($extPOSTVars['formAction'] == 'saveBtn') {      unset($_POST[$this->formName]['formAction']);      $this->sessionExt[$this->formName]['formAction'] = 'saveBtn';        } elseif ($extPOSTVars['saveandcloseBtn']) {      unset($_POST[$this->formName]['saveandcloseBtn']);      unset($_POST[$this->formName]['formAction']);      $this->sessionExt[$this->formName]['formAction'] = 'saveandcloseBtn';    } elseif ($extPOSTVars['saveandshowBtn']) {      unset($_POST[$this->formName]['saveandshowBtn']);      unset($_POST[$this->formName]['formAction']);      $this->sessionExt[$this->formName]['formAction'] = 'saveandshowBtn';    } else {          // Checks GET variables      $extGETVars = $this->uncompressParams(t3lib_div::_GET('sav_library'));      if (is_array($extGETVars)) {        // Clears the limit for the subform if the uid has changed        if ($extGETVars['uid'] != $this->sessionExt[$this->formName]['uid']) {          unset($this->sessionExt[$this->formName]['limitSub']);        }                // Merges the GET values        $this->sessionExt[$this->formName] = array_merge(          $this->sessionExt[$this->formName],          $extGETVars        );                // Processes the browse page action        if ($extGETVars['formAction'] == 'browse') {          if (!$extGETVars['limit']) {            $this->sessionExt[$this->formName]['limit'] = 0;          } else {            $this->sessionExt[$this->formName]['limit'] = $extGETVars['limit'];          }        }                // Processes the browse page action in a subform        if ($extGETVars['formAction'] == 'browseSubForm') {          if (!$extGETVars['limitSub']) {            $limitSub = 0;          } else {            $limitSub = $extGETVars['limitSub'];          }        }        // Processes the limit in subforms        if(isset($limitSub)) {          $this->sessionExt[$this->formName]['limitSub'] = array($extGETVars['field'] => $limitSub);        }      } else {        // Something went wrong in the uncompression, uses the default action.        $this->sessionExt[$this->formName]['formAction'] = '';      }    }    // Cleans if new variables are posted twice    if (is_array($_POST[$this->formName]) && ($this->sessionExt[$this->formName]['formAction'] == 'saveBtn' || $this->sessionExt[$this->formName]['formAction'] == 'saveandcloseBtn')) {      $temp = current($_POST[$this->formName]);      $this->isNewForm = false;      foreach ($_POST[$this->formName] as $val) {        if (!key($val)) {          $this->isNewForm = true;          break;        }      }      if ($this->isNewForm && isset($this->sessionExt[$this->formName]['lastKey']) && $this->sessionExt[$this->formName]['lastKey'] == 0) {        if (!$this->sessionExt[$this->formName]['error']) {          unset($_POST[$this->formName]);         }         } else {          $this->sessionExt[$this->formName]['lastKey'] =            ($this->isNewForm ? 0 : key($temp));      }    } else {      unset($this->sessionExt[$this->formName]['lastKey']);    }    $this->formAction = (      $this->sessionExt[$this->formName]['formAction'] ?      $this->sessionExt[$this->formName]['formAction'] :      $this->formAction    );    $this->uid = (      $this->sessionExt[$this->formName]['uid'] ?      $this->sessionExt[$this->formName]['uid'] :      $this->uid    );   	$this->limit = (      $this->sessionExt[$this->formName]['limit'] ?      $this->sessionExt[$this->formName]['limit'] :      $this->limit    );  	$this->limitSub = (      $this->sessionExt[$this->formName]['limitSub'] ?      $this->sessionExt[$this->formName]['limitSub'] :      $this->limitSub    );  	$this->folderTab = (      $this->sessionExt[$this->formName]['folderTab'] ?      $this->sessionExt[$this->formName]['folderTab'] :      $this->cryptTag('0')    );    $this->inputMode = (      $this->sessionExt[$this->formName]['inputMode'] ?      $this->sessionExt[$this->formName]['inputMode'] :      $this->inputMode    );    $this->subFormName = (      $this->sessionExt[$this->formName]['subFormName'] ?      $this->sessionExt[$this->formName]['subFormName'] :      $this->subFormName    );    // Gets the session load performance counter in debug mode    if ($this->debug & self::DEBUG_PERFORMANCE) {      $this->debugPerformance(__FUNCTION__, ' -> Session and params');    }		// Performs actions		if (!(t3lib_div::_GET('print') && t3lib_div::_GET('cid')) || t3lib_div::_GET('cid') == $this->cObj->data['uid']) {  		$content = $this->dispatch($this->formAction);			}	    // Starts the local performance counter in debug mode    if ($this->debug & self::DEBUG_PERFORMANCE) {      utils::startTimer($this->extKey, __FUNCTION__);    }    // Updates session variable    $this->sessionExt[$this->formName]['inputMode'] = $this->inputMode;   	    $this->sessionExt[$this->formName]['uid'] = $this->uid;   	  	    $this->sessionExt[$this->formName]['folderTab'] = $this->folderTab;    $this->sessionExt[$this->formName]['limitSub'] = $this->limitSub;    $this->sessionExt[$this->formName]['error'] = $this->errorInForm;    $this->sessionExt[$this->formName]['filterSelected'] = $this->sessionFilterSelected;    if (isset($this->sessionFilterSelected)) {      unset($this->sessionFilterSelected);    }    // Sets the session data    $GLOBALS['TSFE']->fe_user->setKey('ses', 'ext', $this->sessionExt);    $GLOBALS['TSFE']->fe_user->setKey('ses', 'filter', $this->sessionFilter);    $GLOBALS['TSFE']->fe_user->setKey('ses', 'filterSelected', $this->sessionFilterSelected);    $GLOBALS['TSFE']->storeSessionData();    // Gets the session  performance counter in debug mode    if ($this->debug & self::DEBUG_PERFORMANCE) {      $this->debugPerformance(__FUNCTION__, ' -> Session update');    }		// Adds javascript for the delete warning		if ($this->inputMode) {  		$content .= (        isset($GLOBALS['TSFE']->fe_user->user) ?        $this->generateJSWarning($this->formName) :        ''      );  	}    $this->extObj->prefixId .= '_' . str_replace(      ' ',      '-',      $this->extConfig['forms'][$this->conf['formId']]['title']    );    return $this->extObj->pi_wrapInBaseClass($content);	}	  	/**	 * Performs action depending on the formAction	 *	 * @param $formAction string	 *	 * @return string (output)	 */	protected function dispatch($formAction) {    // Dispatches according to the formAction		switch($formAction) {		  case 'inputForm':			case 'inputModeBtn':			   if ($this->uid) {				   $this->inputMode = 1; 				   $out = $this->buildForm('inputForm');         } else {				   $out = $this->buildForm('showAll');                  }		     break;			case 'editBtn':				$out = $this->buildForm('inputForm');				break;      case 'deleteItemBtn':      case 'upBtn':      case 'downBtn':			case 'saveBtn':				$errors = $this->queries_update($this->extConfig['queries'][$this->formConfig['query']]);				if ($errors['fatal']) {          return $this->processFatalError($errors['fatal']);        }				$this->formAction = 'inputModeBtn';				if ($this->errorInNewForm()) {				  $this->newSubForm = 1;				}				$out = $this->buildForm('inputForm', $errors);				break;			case 'saveandcloseBtn':				$errors = $this->queries_update($this->extConfig['queries'][$this->formConfig['query']]);				if ($errors['fatal']) {          return $this->processFatalError($errors['fatal']);        }        				if ($errors) {					$out = $this->buildForm('inputForm', $errors);				} else {				  $this->inputMode = 0;				  $this->limitSub = 0;          $this->folderTab = $this->cryptTag('0');					$out = $this->buildForm('showAll');				}				break;			case 'saveandshowBtn':				$errors = $this->queries_update($this->extConfig['queries'][$this->formConfig['query']]);				if ($errors['fatal']) {          return $this->processFatalError($errors['fatal']);        }				if ($errors) {					$out = $this->buildForm('inputForm', $errors);				} else {				  $this->inputMode = 0;				  $this->limitSub = 0;					$out = $this->buildForm('showSingle');				}				break;			case 'closeBtn':				$this->inputMode = (($this->inputMode==2) ? 1 : 0);        $this->folderTab = $this->cryptTag('0');				$this->limitSub = 0;				$out = $this->buildForm('showAll');				break;			case 'deleteBtn':				$this->queries_delete($this->extConfig['queries'][$this->formConfig['query']]);        $this->folderTab = $this->cryptTag('0');				$out = $this->buildForm('showAll');				break;			case 'exportBtn':			  // Gets the rows from a query        $func = trim($this->savlibraryConfig['viewers']['export']);    		$ta = $this->viewers->$func(          $rows,          $this->extConfig['views'][$this->formConfig[$name]],          $errors        );		    // Builds the form		    $out = $this->replaceTemplate($ta);		    $out = $this->wrapForm($out, $hidden, $this->formName);    					  break;			case 'newBtnSubForm':			  $this->newSubForm = 1;				$out = $this->buildForm('inputForm');				break;			case 'newBtn':        $this->uid = 0;        $this->folderTab = $this->cryptTag('0');        unset($this->sessionExt[$this->formName]['folderTab']);				$this->inputMode = 2;				$out = $this->buildForm('inputForm');				break;			case 'changeFolderTab':			case 'rightArrowBtnSubForm':			case 'leftArrowBtnSubForm':			case 'browseSubForm':			  if ($this->inputMode) {				  $out = $this->buildForm('inputForm');        } else {				  $out = $this->buildForm('showSingle');        }			  break;			case 'showSingle':        $this->inputMode = 0;				$out = $this->buildForm('showSingle');				break;			case 'toggleModeBtn':				$this->inputMode = !$this->inputMode;        $this->folderTab = $this->cryptTag('0');				$out = $this->buildForm('showAll');							break;			case 'printBtn':        if ($this->uid) {				  $out = $this->buildForm('showSingle');				} else {          // Recovers the selected filter if any          if ($this->sessionExt[$this->formName]['filterSelected']) {            $this->sessionFilterSelected =              $this->sessionExt[$this->formName]['filterSelected'];          }          $this->conf['maxItems'] = 0; // Always display all items          $this->folderTab = $this->cryptTag('0');				  $out = $this->buildForm('showAll');                }				break;			case 'updateBtn':        $errors = $this->queries_update(          $this->extConfig['queries'][$this->formConfig['query']]        );				if ($errors['fatal']) {          return $this->processFatalError($errors['fatal']);        }                // Calls buildform twice to update all fields				$out = $this->buildForm('inputForm', $errors);				$this->titleProcessed = false;				$out = $this->buildForm('inputForm', $errors);				break;			case 'updateForm':         	$this->inputMode = 1;             $this->folderTab = $this->cryptTag('0');				$out = $this->buildForm('updateForm');				break;			case 'noDisplay':   				$out = '';				break;					default:        $this->folderTab = $this->cryptTag('0');        $out = $this->buildForm('showAll');        break;		}		return $out;	}   /***************************************************************/   /* Form methods                                                */   /***************************************************************/	/**	 * Updates TCA and get the config parameters from a field	 *	 *	 * @param $field array (field)	 * @param $opt integer (option, if not zero, the function returns only the TCA information)	 *	 * @return array (configuration for the given field)	 */	public function getConfig(&$field, $opt=0) {    if ($opt) {      // Gets the config information only from the TCA      $res = explode('.', $field);		  t3lib_div::loadTCA($res[0]);		  $config = $GLOBALS['TCA'][$res[0]]['columns'][$res[1]]['config'];		  $config['table'] = $res[0];      $config['field'] = $res[1];        return $config;           }    // Gets the config information from the TCA    $table = $field['config']['table'];    t3lib_div::loadTCA($table);			$config = $GLOBALS['TCA'][$table]['columns'][$field['config']['field']]['config'];    // Adds or overwrites the parameters with the user's definition    if (!$config) {      $config = array();    }    // Adds the columns for existing tables    if (isset($this->extConfig['TCA'][$table][$field['config']['field']])) {      $config += $this->extConfig['TCA'][$table][$field['config']['field']]['config'];    }    $config = $field['config'] + $config;    $config['fullFieldName'] = $config['table'] . '.' . $config['field'];    $config['cryptedFieldName'] = $this->cryptTag($config['fullFieldName']);    // Adds or replaces with the page TSconfig if any    $pageTSConfig = $GLOBALS['TSFE']->getPagesTSconfig();    $fieldTSConfig = $pageTSConfig[$this->tsConfigPluginName . '.']      [$this->formConfig['title'] . '.'][$this->viewName . '.'][$config['field'] . '.'];    if(is_array($fieldTSConfig)) {      foreach($fieldTSConfig as $key=>$value) {        $config[strtolower($key)] = $value;      }      }		return $config;	}		/**	 * Gets the viewer function to apply to a field. Function is given by the savlibraryConfig	 *	 *	 * @param $config array (configuration)	 *	 * @return string (function to apply)	 */	public function getFunc(&$config) {    $validKey = -1;		if ($this->savlibraryConfig['itemviewers'][$config['type']]) {      foreach ($this->savlibraryConfig['itemviewers'][$config['type']] as $key => $element) {        if (!is_array($element['conditions'])) {          $validKey = $key;        } else {          $cond = 1;          foreach ($element['conditions'] as $condition) {            if (! $this->$condition['ope']($config[$condition['field']], $condition['value'])) {              $cond = 0;              break;            }          }          if ($cond) {            $validKey = $key;          }        }       }    }    if ($validKey >= 0) {      return trim($this->savlibraryConfig['itemviewers'][$config['type']][$validKey]['name']) . ($config['edit'] ? 'EditMode' : '');    } else {      $this->addError('error.unknownType', $config['type']);      return 0;    }	}  	/**	 * Generates a template array for a form based on table name and a field list	 *	 * @param $name string (name of the REGIONS)	 * @param $row array (row used to initialize the fields)	 * @param $fields array (fields to parse)   * @param $errors array (errors to display)	 * @param $editflag boolean (if true, the form can be edited)	 *	 * @return array (template array to be used in a region)	 */	public function generateFormTa($name, &$row, $fields, $errors, $editFlag) {		// Checks if folders have been defined		if (!is_array($fields)) {		  $this->addError('error.noFieldSelectedInForm');		  return;    }    reset($fields);		if (key($fields) == $this->cryptTag('0')) {      // Resets the folderTab if not in a subform      if ($this->folderTab != $this->cryptTag('0') && $this->processSubForm === false) {        $this->folderTab = $this->cryptTag('0');      }		  $_fields = $fields[$this->cryptTag('0')]['fields'];			$ta['CUTTERS']['CUT_folderTabsTop'] = 1;		} else {      // Gets the first allowed tab      $firstAllowedFolderTabSet = false;      foreach ($fields as $folderTabId => $folderTab) {        // Gets the folder tab configuration        $folderTabConfig = $this->getConfig($folderTab);        $folderTabConfig += $folderTab['config'];        if (!$firstAllowedFolderTabSet && !$this->checkCut($folderTabConfig, $row)) {          $firstAllowedFolderTab = $folderTabId;          $firstAllowedFolderTabSet = true;        }      }      // Sets the field based on the folder tab.      if ($this->folderTab == $this->cryptTag('0') || !isset($fields[$this->folderTab]['fields'])) {        $this->folderTab = $firstAllowedFolderTab;      } else {        // Gets the folder tab configuration        $folderTabConfig = $this->getConfig($fields[$this->folderTab]);        $folderTabConfig += $fields[$this->folderTab]['config'];        if ($this->checkCut($folderTabConfig, $row)) {          $this->folderTab = $firstAllowedFolderTab;        }      }      $_fields = $fields[$this->folderTab]['fields'];      // Processes the folders			foreach ($fields as $folderTabId => $folderTab) {        // Gets the folder tab configuration        $folderTabConfig = $this->getConfig($folderTab);        $folderTabConfig += $folderTab['config'];        if ($folderTabId == $this->folderTab) {          $editFlag = (            isset($folderTabConfig['editadminplus']) ?            $this->userIsAdmin($row, 1) :            $editFlag          );        }                       if (is_array($folderTabConfig)) {          // Checks if the folder tab must be displayed          $displayFolderTab = !$this->checkCut($folderTabConfig, $row);                    if ($displayFolderTab) {					    unset ($node);				    $node['TYPE'] = 'folderTab';				    $node['MARKERS']['id'] = (              ($this->folderTab == $folderTabId) ?              'id="currentTab"' :              ''            );            $formParams = array(              'formAction' => 'changeFolderTab',              'folderTab' => $folderTabId,              'uid' => $this->uid,            );				    $node['MARKERS']['folderTabLink'] = preg_replace(              '/(<a[^>]*)>/',              '$1 onclick="return update();">',              $this->buildLinkTP(                utils::htmlSpanElement(                  array(),                  $this->getExtLL($folderTabConfig['label'],0)                 ),                $formParams,                1)            );				    $node['MARKERS']['folderTabLabel'] = $folderTabId;				    $ta['REGIONS']['folderTabs'][] = $node;          } elseif ($this->folderTab == $folderId) {            // Does not display the tab. Sets the cutters and return			      $ta['CUTTERS']['CUT_folderTabsTop'] = 0;			      $ta['REGIONS'][$name]['TYPE'] = 'item';			      $ta['REGIONS'][$name]['CUTTERS']['CUT_error'] = 1;			      $ta['REGIONS'][$name]['CUTTERS']['CUT_label'] = 1;			      $ta['REGIONS'][$name]['CUTTERS']['CUT_value'] = 1;			      $ta['REGIONS'][$name]['CUTTERS']['CUT_fusionBegin'] = 1;			      $ta['REGIONS'][$name]['CUTTERS']['CUT_fusionEnd'] = 1;            return $ta;          }                 }			}			$ta['CUTTERS']['CUT_folderTabsTop'] = 0;		}       // Sets the title    reset($fields);    $temp = current($fields);    if (!$this->titleProcessed) {      $ta['MARKERS']['formTitle'] = $this->processTitle($temp['title'], $row);      $this->titleProcessed = true;    }    // Gets the submitted data (used with updateForm)    $serialSubmittedData = $this->getValue(      $this->tableLocal,      '_submitted_data_',      $row    );    if ($serialSubmittedData) {      $submittedData = unserialize(        html_entity_decode($serialSubmittedData, ENT_QUOTES)      );      if ($submittedData && array_key_exists('Temp_' . $this->formShortName, $submittedData)) {        $submittedData[$this->formShortName] =          $submittedData['Temp_' . $this->formShortName];      }       }	     // Sets the fields		foreach ($_fields as $key => $_field) {	  			// Gets the configuration      $config = $this->getConfig($_field);			// Initializes variables and default type as input (useful when aliases are used)			$field = $config['field'];			$table = $config['table'];			$config['uid'] = $this->getValue($table, 'uid', $row);      $config['_value'] = $this->getValue($table, $field, $row);      // Checks if the field has to be kept for future use in subform      if ($config['keepfieldsinsubform']) {        if ($config['keepfieldsinsubform'] == '*') {          foreach ($row as $keepFieldKey => $keepFieldValue) {            $config['keepfieldsinsubformvalues'][$keepFieldKey] = $keepFieldValue;               }                 } else {          $keepFields = explode(',', $config['keepfieldsinsubform']);          foreach ($keepFields as $keepField) {            $config['keepfieldsinsubformvalues'][$keepField] =              $this->getValue($table, $keepField, $row);          }        }      }  		if (!$config['type']) {				$config['type'] = 'input';			}			// Sets the $edit value depending on the configuration      $edit = (        isset($config['editadminplus']) ?        $this->userIsAdmin($row, 1) :        (isset($config['edit']) ? $config['edit'] : $editFlag)      );			// Generates label. $tag is the displayed field depending on the attribute "label"			unset($_value);			unset($node);			$node['TYPE'] = 'item';			$node['MARKERS']['field'] = $field;			if (is_null($config['onlabel']) || !$config['onlabel']) {				$label = $this->getLL_db('LLL:EXT:' . $this->extKey .          '/locallang_db.xml:' . $config['fullFieldName']);				if($this->inputIsAllowedInForm() && ($config['required'] || strpos($config['eval'], 'required') !== false)) {          $label .= utils::htmlImgElement(            array(              utils::htmlAddAttribute('class', 'requiredIcon'),              utils::htmlAddAttribute('src', $this->iconsDir . 'required.gif'),              utils::htmlAddAttribute('title', $this->getLibraryLL('icon.required')),              utils::htmlAddAttribute('alt', $this->getLibraryLL('icon.required')),            )          );				}				$node['MARKERS']['Label'] = $label;				$tag = ($config['tagname'] ? $field : 'Value');			} else {				$node['MARKERS']['Value'] = '';				$tag = ($config['tagname'] ? $field : 'Label');			}			// Sets the message by the value of the field			if (isset($config['fieldmessage'])) {        $config['message'] =          $this->getValue($table, $config['fieldmessage'], $row);      } 			// Sets the link by the value of the field			if (isset($config['fieldlink'])) {        $config['link'] = $this->getValue($table, $config['fieldlink'], $row);      } 			// Sets the alt by the value of the field			if (isset($config['fieldalt'])) {        $config['alt'] = $this->getValue($table, $config['fieldalt'], $row);      }       // Sets additional folder      if (isset($config['addtouploadfolderfromfield'])) {        $config['addtouploadfolder'] = str_replace(          ' ',          '_',          $this->getValue($table, $config['addtouploadfolderfromfield'], $row)        );      }      // Sets the check mail value      if (isset($config['fieldforcheckmail'])) {        $config['valueforcheckmail'] =          $this->getValue($table, $config['fieldforcheckmail'], $row);      }      // Sets the markers      if (isset($config['markers'])) {        $markers = explode(',', $config['markers']);        $temp = array();        foreach($markers as $marker) {          if (preg_match('/([0-9A-Za-z_#]+)\s=\s###([0-9A-Za-z_\.]*)###/', trim($marker), $match)) {            $temp[] = $match[1] . '=' . $this->getValue($table, $match[2], $row);          }        }        $config['markers'] = implode(',', $temp);      }      			// Substitutes the value if it is an alias			if (isset($config['label'])) {				$node['MARKERS']['Label'] = $config['label'];      }			if (isset($config['alias'])) {				$value = $this->getValue($table, $config['alias'], $row);			} elseif (isset($config['value'])) {        // sets the value from the config parameter and set the type to label				$value = $config['value'];				$config['type'] = 'label';						} elseif (isset($config['reqvalue'])) {        // Sets the value from the config parameter, which should be a request        // with a field 'value' and set the type to label        $query = $config['reqvalue'];                 // Processes localization tags        $query = $this->processLocalizationTags($query);        if (preg_match_all('/###row\[([^\]]+)\]###/', $query, $matches)) {          foreach ($matches[0] as $k => $match) {            $mA[$matches[0][$k]] =              $this->getValue($table, $matches[1][$k], $row);          }        }                $mA['###uid###'] = intval($config['uid'] ? $config['uid'] : 0);        $mA['###uidParent###'] = intval($row['uid'] ? $row['uid'] : 0);        $mA['###uidItem###'] = intval($this->rowItem);        $mA['###uidSelected###'] = $this->getValue($table, $field, $row);        $mA['###user###'] = $GLOBALS['TSFE']->fe_user->user['uid'];        $query = $this->cObj->substituteMarkerArrayCached(          $query,          $mA,          array(),          array()        );        // Checks if the query is a SELECT query and for errors  		  $value='';        if (!$this->isSelectQuery($query)) {          $this->addError('error.onlySelectQueryAllowed', $config['field']);        } elseif (!($res = $GLOBALS['TYPO3_DB']->sql_query($query))) {          $this->addError('error.incorrectQueryInReqValue', $config['field']);        } else {          // Processes the query          if ($GLOBALS['TYPO3_DB']->sql_error($res)) {            $this->addError('error.incorrectQueryInReqValue', $field);          } else {  		      $separator = ($config['separator'] ? $config['separator'] : '<br />');  		      while ($rows = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {              if (array_key_exists('value',$rows)) {                if (isset($config['func'])) {                  $value .= ($value ? $separator : '') .                    $this->$config['func']($rows['value'], $rows['uid'], $config);                } else {                  $value .= ($value ? $separator : '') . $rows['value'];                }              } else {                $value = $this->getValue($table, $field, $row);                // add the result to the row                foreach($rows as $k=>$v) {                  $row[$k] = $v;                }              }            }  		    }          if (isset($config['func']))	{            unset($config['func']);          }        }      } else {				$value = $this->getValue($table, $field, $row);			}      // Wrapper on the value      if ($config['stdwrapvalue']) {        $TSparser = t3lib_div::makeInstance('t3lib_TSparser');        $TSparser->parse($config['stdwrapvalue']);        $value = $this->cObj->stdWrap($value, $TSparser->setup);      }            // Processes tags and localization in tsProperties      if ($config['tsproperties']) {        // Process the markers        $config['tsproperties'] = $this->processMarkerTags(          $config['tsproperties'],          $row,          array('this' => $value)        );        // Processes the localization tags        $config['tsproperties'] = $this->processLocalizationTags(          $config['tsproperties']        );                // Processes the TS        $TSparser = t3lib_div::makeInstance('t3lib_TSparser');        $TSparser->parse($config['tsproperties']);        $config['tsproperties'] = $TSparser->setup;        // Processes the tsObject if any, the result replaces $value        if ($config['tsobject']) {          $value = $this->cObj->cObjGetSingle($config['tsobject'], $config['tsproperties']);        }      }			// Evaluates the function if necessary			if (isset($config['func'])) {        $_value = $value;        if ($value) {          $value = $config['funcaddleftifnotnull'] . $value .            $config['funcaddrightifnotnull'];        } else {          $value = $config['funcaddleftifnull'] . $value .            $config['funcaddrightifnull'];        }				$value = $this->$config['func'](          $value,          ($config['setuid']=='this'? $config['_value'] : $this->getValue($table, 'uid', $row)),          $config        );			}      // Checks if the generateRTFBtn button was activated      if ($config['generatertf'] && $key==$this->fieldFromButton && $this->formAction=='updateBtn' && ($this->rowItemFromButton ? ($this->rowItemFromButton==$this->rowItem) : 1)) {        // Gets the template RTF file        if ($config['templatertf']) {          // Checks the extension          $templatertf = $this->queriers->processFieldTags($config['templatertf'], $row);          $path_parts = pathinfo($templatertf);          if ($path_parts['extension'] == 'rtf') {            // Reads and process the file            $value = '';            if ($file = @file_get_contents(PATH_site . $templatertf)) {              // Processes ###field### tags              $file = $this->queriers->processFieldTags($file, $row, $config);                                          // Writes the result              if ($config['savefilertf']) {                $path_parts = pathinfo($config['savefilertf']);                // Creates the directories if necessary    						$dirs = explode('/',$path_parts['dirname']);    						$path = PATH_site;    						foreach($dirs as $dir){                   $path .= $dir;    						  if (!is_dir($path)) {                    if(!mkdir($path)) {                      $errors[$config['cryptedFieldName']][$config['uid']] =                        'error.mkdirIncorrect';                    }    							}    							$path .= '/';    						}                // Processes the file name                $fileName = str_replace(                  ' ',                  '_',                  $this->queriers->processFieldTags(                    $path_parts['basename'],                    $row                  )                );                              file_put_contents($path . $fileName,$file);                              // Sets the evalue                $value = $fileName;              } else {                $errors[$config['cryptedFieldName']][$config['uid']] =                  'error.incorrectRTFSaveFileName';              }                    } else {              $errors[$config['cryptedFieldName']][$config['uid']] =                'error.incorrectRTFTemplateFileName';            }          } else {            $errors[$config['cryptedFieldName']][$config['uid']] =              'error.incorrectRTFTemplateFileExtension';          }        } else {          $errors[$config['cryptedFieldName']][$config['uid']] =            'error.incorrectRTFTemplateFileConfig';        }      }   			// Errors			if ($errors) {        $config['errors'] = $errors;      }      $errorUid = ($config['uid'] && !$this->isNewForm ? $config['uid'] : 0);      if (is_array($errors[$config['cryptedFieldName']]) && $errors[$config['cryptedFieldName']][$errorUid]) {				$node['CUTTERS']['CUT_error'] = 0;				if ($config['verifiermessage']) {          $node['MARKERS']['error'] =            $this->processLocalizationTags($config['verifiermessage']);        } else {				  $node['MARKERS']['error'] =            $this->getLibraryLL($errors[$config['cryptedFieldName']][$errorUid]);        }			} else {				$node['CUTTERS']['CUT_error'] = 1;			}			// Fusion of several cells			if ($this->fusionEnd) {        $this->fusion = 0;			  $this->fusionEnd = 0;      }			$this->fusionBegin = 0;			if ($config['fusion'] == 'begin') {			  $this->fusionBegin = 1;        $this->fusion = 1;      }			if ($config['fusion'] == 'end') {			  $this->fusionEnd = 1;      }      // Wrappers      $node['WRAPPERS']['wrapitem'] = $this->processLocalizationTags(        $config['wrapitem']      );           			// Cutters      $config['value'] = $value;      $cut = $this->checkCut($config,$row);      $node['CUTTERS']['CUT_label'] = $cut || $config['cutlabel'];			$node['CUTTERS']['CUT_value'] = $cut;     			$node['CUTTERS']['CUT_fusionEnd'] =        ($this->fusion && !$this->fusionEnd) ||        (          ((!$this->fusion && $cut) || ($this->fusion && $cut && $config['cutfusion'])) ?          1 :          0        );			$node['CUTTERS']['CUT_fusionBegin'] =        ($this->fusion && !$this->fusionBegin) ||        (          ((!$this->fusion && $cut) || ($this->fusion && $cut && $config['cutfusion'])) ?          1 :          0        );              // Calls the viewer depending on the type      $config['edit'] = $edit;      $config['name'] = $name;      $config['tag'] = $tag;		  $config['elementControlName'] =        $this->formName . '[' . $this->cryptTag($config['fullFieldName']) . ']' .        (          isset($this->rowItem) ?          '[' . $this->rowItem . ']' :          '[' . $config['uid'] . ']'        );      $config['cutvalue'] = $node['CUTTERS']['CUT_value'];      $config['subform'] = '';      // Special processing to add an editable field              $configUpdate = $config;      if ($config['addedit'] && $config['addedittype']) {        $configUpdate['type'] = $config['addedittype'];      }      if (($func = $this->getFunc($config))) {        // If a group condition is associated with the field and the user does not belong to this group, then remove the value        if ($config['usergroup'] && !in_array($config['usergroup'], $GLOBALS['TSFE']->fe_user->groupData['title'])) {          $value = '';        }        $value = $this->itemviewers->$func($config);           // Prepares the left and right contents        if ($value) {          $addLeft = $config['addleftifnotnull'];          $addRight = $config['addrightifnotnull'];        } else {          $addLeft = $config['addleftifnull'];          $addRight = $config['addrightifnull'];        }                 // Evaluates the function if necessary  			if (isset($config['funcleft'])) {  			  $config['funcspecial'] = 'left';				  $addLeft = $this->$config['funcleft'](            $addLeft,            (              $config['setuidleft']=='this' ?              $config['_value'] :              $this->getValue($table, 'uid', $row)            ),            $config          );        }  			if (isset($config['funcright'])) {  			  $config['funcspecial'] = 'right';				  $addRight = $this->$config['funcright'](            $addRight,            (              $config['setuidright']=='this' ?              $config['_value'] :              $this->getValue($table, 'uid', $row)            ),            $config          );        }               // Adds the left and right contents        $value = $addLeft . $value . $addRight;                       // New icon         if ($config['addnewicon'] && (time() <= $this->getValue($this->tableLocal, 'crdate', $row) + $config['addnewicon'] * 86400)) {          $image = utils::htmlImgElement(            array(              utils::htmlAddAttribute('class', 'newIcon'),              utils::htmlAddAttribute('src', $this->iconsDir . 'newicon.gif'),              utils::htmlAddAttribute('title', $this->getLibraryLL('icon.new')),              utils::htmlAddAttribute('alt', $this->getLibraryLL('icon.new')),            )          );          $value = $image . $value;        }  		        // Processes localization of field title on the value        preg_match_all('/\$\$\$label\[([^\]]+)\]\$\$\$/', $value, $matches);        foreach ($matches[1] as $keyMatch => $valueMatch) {          // Tries with the local table          $label = $this->getLL_db('LLL:EXT:' . $this->extKey .            '/locallang_db.xml:' . $this->tableLocal . '.' . $valueMatch);          if ($label) {            $value = str_replace($matches[0][$keyMatch], $label, $value);          } else {            // Tries with the matching value which should be a valid tableName.fieldName tag            $label = $this->getLL_db('LLL:EXT:' . $this->extKey .              '/locallang_db.xml:' . $valueMatch);            if ($label) {              $value = str_replace($matches[0][$keyMatch], $label, $value);            }          }        }        // Processes localization tags on the value        $value = $this->processLocalizationTags($value);        // Adds the value to the node        $node['MARKERS'][$tag] = $value;        $node['MARKERS'][$tag . '_fullFieldName'] = $config['fullFieldName'];        $node['MARKERS']['subform'] = $config['subform'];        // Styles and classes        $node['MARKERS']['styleValue'] = (          $config['stylevalue'] ?          'style="' . $config['stylevalue'] . '"' :          ''        );        $node['MARKERS']['styleLabel'] = (          $config['stylelabel'] ?          'style="' . $config['stylelabel'] . '"' :          ''        );        $node['MARKERS']['classValue'] = (          $config['classvalue'] ?          'class="' . $config['classvalue'] . '"' :          'class="value' . $config['subform'] . '"'        );  			$node['MARKERS']['classLabel'] = (          $config['classlabel'] ?          'class="' . $config['classlabel'] . '"' :          'class="label"'        );  			$node['MARKERS']['classItem'] = (          $config['classitem'] ?          $config['classitem'] :          ''        );        // Special processing to cut the item if it has the same value as the previous one        if ($config['cutifsameasprevious']) {          if ($this->sameValueArray[$config['fullFieldName']] == $value) {            $node['CUTTERS']['CUT_value'] = 1;            if ($config['classitem']) {              $node['MARKERS']['classItem'] = '';            }          } else {            $this->sameValueArray[$config['fullFieldName']] = $value;          }        }        // Special processing for update Form)        if ($this->viewName == 'updateForm') {          $this->processUpdateForm($configUpdate, $key, $submittedData, $node);        }       }     			$ta['REGIONS'][$name][] = $node;		}		return $ta;	}	/**	 * Processes the update form	 *	 * @param $config array (configuration array)	 * @param $key int (fiel key)	 * @param $submittedData array (data)	 * @param $submittedData array (output data)	 	 *	 * @return boolean (true if it should be cut)	 */  protected function processUpdateForm($config, $key, &$submittedData, &$node) {    if ($config['addedit'] || $config['addeditifnull'] || $config['addeditifadmin']) {      $savedConfig = $config;                // Gets the function for the field      $function = $this->getFunc($config);      $tag = $config['tag'];            // Displays the previous submitted data if any      $oldValue = html_entity_decode($config['value'], ENT_QUOTES);      if ($submittedData[$this->formShortName][$key]) {        $submittedValue = $submittedData[$this->formShortName][$key][$config['uid']];        $oldValue = html_entity_decode($config['value'], ENT_QUOTES);        // Case where a non-true MM relation is used                if (!$config['MM'] && $config['maxitems']>1) {          $submittedValue = implode(',', $submittedValue);        }                                 // Displays the submitted value        $config['_value'] = $submittedValue;                $config['value'] = $submittedValue;        // Processes special type          // multiple checkboxes => build one integer  			if ($config['type'] == 'check' && is_array ($config['items'])) {  				$pow = 1;  				$val = 0;  				foreach($config['value'] as $checked) {            if ($checked) {              $val += $pow;            }            $pow = $pow <<1;          }          unset($config['value']);          unset($config['_value']);          $config['value'] = $val;		          $config['_value'] = $val;		          $submittedValue = $config['value'];                         }	                   // Date and datetime        if ($config['type'] == 'input' && ($config['eval'] == 'date' || $config['eval'] == 'datetime')) {                  $config['_value'] = $this->date2timestamp(            $config['_value'],            $config,            $errorDate          );          if ($errorDate) {            $config['errorDateValue'] = $config['_value'];            $config['_value'] = '';                  }              $config['value'] = $this->date2timestamp(            $config['value'],            $config,            $errorDate          );          if ($errorDate && !$config['errorDateValue']){            $config['errorDateValue'] = $config['value'];            $config['value'] = '';                  }           $submittedValue = $config['value'];                         }                    // Sets the checkbox marker if information is different        if ($oldValue != $submittedValue) {              $node['MARKERS'][$tag . '_Check'] = 1;        }                  }       // Sets the Field marker      $node['MARKERS'][$tag . '_Field'] =        $this->formName . '[' . $config['cryptedFieldName'] . ']' .        (          isset($this->rowItem) ?          '[' . $this->rowItem .']' :          '[' . $config['uid'] . ']'        );      $node['MARKERS'][$tag . '_cryptedFieldName'] = $config['cryptedFieldName'];      $node['MARKERS'][$tag . '_fullFieldName'] = $config['fullFieldName'];      if ($config['required']) {        $node['MARKERS'][$tag . '_Required'] = 1;      }      if ($config['checkedinupdateformadmin']) {        $node['MARKERS'][$tag . '_Checked'] = 1;      }      if ($config['wrapcheckedinupdateformadmin']) {        $node['MARKERS'][$tag . '_WrapChecked'] =          $config['wrapcheckedinupdateformadmin'];      }      if ($config['wrapnotcheckedinupdateformadmin']) {        $node['MARKERS'][$tag . '_WrapNotChecked'] =          $config['wrapnotcheckedinupdateformadmin'];      }      // Sets the Edit marker      if ($config['addedit'] || ($config['addeditifnull'] && !$config['_value'])) {        $config['edit'] = 1;        $func = $function . 'EditMode';        $node['MARKERS'][$tag . '_Edit'] = $this->itemviewers->$func($config);      }      if ($config['addeditifadmin'] && $this->inputIsAllowedInForm()) {        $config['edit'] = 1;        $func = $function . 'EditMode';        $node['MARKERS'][$tag . '_Edit'] = $this->itemviewers->$func($config);      }                $config = $savedConfig;      $config['_value'] = $config['default'];      $config['value'] = $config['default'];            // Displays the previous submitted data with the tag New_ if any      if ($submittedData['New_' . $this->formShortName][$key]) {        $config['uid'] = '0';        $submittedValue =          $submittedData['New_' . $this->formShortName][$key][$config['uid']];        $node['MARKERS'][$tag . '_Field'] =          $this->formName . '[' . $config['cryptedFieldName'] . ']' .            '[' . $config['uid'] . ']';                             // Displays the submitted value        $config['_value'] = $submittedValue;                $config['value'] = $submittedValue;        // Processes special type          // multiple checkboxes => build one integer  			if ($config['type'] == 'check' && is_array ($config['items'])) {  				$pow = 1;  				$val = 0;  				foreach($config['value'] as $checked) {            if ($checked) {              $val += $pow;            }            $pow = $pow <<1;          }          unset($config['value']);          unset($config['_value']);          $config['value'] = $val;		          $config['_value'] = $val;		          $submittedValue = $config['value'];                         }	                   // Date and datetime        if ($config['type'] == 'input' && ($config['eval'] == 'date' || $config['eval'] == 'datetime')) {          $config['_value'] =            $this->date2timestamp($config['_value'] , $config, $errorDate);          if ($errorDate) {            $config['errorDateValue'] = $config['_value'];            $config['_value'] = '';                  }              $config['value'] =            $this->date2timestamp($config['value'] , $config, $errorDate);          if ($errorDate && !$config['errorDateValue']){            $config['errorDateValue'] = $config['value'];            $config['value'] = '';                  }           $submittedValue = $config['value'];                           }        }      if (!$config['edit']) {                 $config['edit'] = 1;        $func = $function.'EditMode';      }      $config['uid'] = '0';      $config['elementControlName'] =        $this->formName . '[' . $config['cryptedFieldName'] . ']' .        (          isset($this->rowItem) ?          '[' . $this->rowItem . ']' :          '[' . $config['uid'].']'        );      $node['MARKERS'][$tag . '_New'] = str_replace(        $this->formName . '[' . $config['cryptedFieldName'] . '][0]',        'New_' . $this->formName . '[' . $config['cryptedFieldName'] . '][0]',        $this->itemviewers->$func($config)      );    }  else {      // Set the field name marker      $tag = $config['tag'];      $node['MARKERS'][$tag . '_cryptedFieldName'] = $config['cryptedFieldName'];      $node['MARKERS'][$tag . '_fullFieldName'] = $config['fullFieldName'];    }  }	/**	 * Checks if a field must be cut	 *	 * @param $config array (configuration array)	 * @param $data array (data)	 *	 * @return boolean (true if it should be cut)	 */  public function checkCut(&$config, &$data) {    $cut = false;     // Processes cutif    if ($config['cutif']) {      // Splits the expressions on | or &      preg_match_all('/(\||&)?([^\|&]+)/', $config['cutif'], $matchesExp);      foreach ($matchesExp[2] as $keyMatchExp => $matchExp) {        // Gets the operator between expressions        $operatorExp = $matchesExp[1][$keyMatchExp];        // Splits the expression        preg_match('/(###)?([^#]*?)(=|!=|<-|!<-)(.+)$/', $matchExp, $match);        $metatag = $match[1];        $lvalue = trim($match[2]);        $operator = $match[3];        $rvalue = trim($match[4]);        if($rvalue == 'EMPTY') {          $rvalue = '';        }        if ($metatag) {          // Processes the tag ###usergroup### or ###group###          $rvalue = str_replace('###', '', $rvalue);                                                  if ($lvalue == 'usergroup') {            $rows = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(              /* SELECT   */	'uid',        			/* FROM     */	'fe_groups',        	 		/* WHERE    */	'title="' . $rvalue . '"'  		      );            $condValue = in_array(              $rows[0]['uid'],              explode(',', $GLOBALS['TSFE']->fe_user->user['usergroup'])            );          } elseif ($lvalue == 'group') {            $rows = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(              /* SELECT   */	'uid',        			/* FROM     */	'fe_groups',        	 		/* WHERE    */	'title="' . $rvalue . '"'  		      );            $condValue = in_array(              $rows[0]['uid'],              explode(',', $this->getValue($this->tableLocal, 'usergroup', $data))            );          }        } else {                          // Replaces the tag ###user### if any          if ($rvalue == '###user###') {            $rvalue = str_replace(              '###user###',              $GLOBALS['TSFE']->fe_user->user['uid'],              $rvalue            );          }          // Replaces the tag ###cruser### if any. Same as ###user### but check if is a new record          if ($rvalue == '###cruser###') {            if (!$data['uid']) {                              // This case can occur if a cutter is set and a new item is input.              // The condition is skipped              continue;            } else {              $rvalue = str_replace(                '###cruser###',                $GLOBALS['TSFE']->fe_user->user['uid'],                $rvalue              );            }          }                    // Gets the table name and the field          if(strpos($lvalue, '.') === false) {            // Add local table by default if it is not an alias            $lvalue = (              array_key_exists($lvalue, $data)              ? '.' . $lvalue :              $this->tableLocal . '.' . $lvalue            );          }          $temp = explode('.', $lvalue);		      t3lib_div::loadTCA($temp[0]);		      $lvalueConfig = $GLOBALS['TCA'][$temp[0]]['columns'][$temp[1]]['config'];          switch($operator) {            // Checks the lvalue is equal to the rvalue            case '=':            case '!=':              $lvalue = $this->getValue($temp[0], $temp[1], $data);              $condValue = ($lvalue == $rvalue);              break;                          // Checks if the rvalue belongs to the lvalue considered as a set            case '<-':            case '!<-':              // Processes the field value according to the type              switch ($lvalueConfig['type']){                case 'select':                          case 'group':                  if ($data['uid']) {                    $MM_table = $lvalueConfig['MM'];                    // Checks if it's a true MM relation                    if ($MM_table){                      $res = $GLOBALS['TYPO3_DB']->exec_SELECTquery(                        /* SELECT   */	'uid_foreign',        				        /* FROM     */	$MM_table,                        /* WHERE    */	'uid_local=' . intval($data['uid']) .                          ' AND uid_foreign ' . (                            ($operator == '!<-') ?                            'IN' :                            'NOT IN'                          ) . ' (' . $rvalue . ')'  		                );                      $condValue = ($GLOBALS['TYPO3_DB']->sql_num_rows($res)>=1);                    } else {                      $condValue = in_array(                        $rvalue,                        explode(',', $this->getValue($temp[0], $temp[1], $data))                      );                    }                  } else {                    $condValue = ($operator == '<-' ? 1 : 0); // Cut by default                  }              }              break;                               }        }                      // Sets the condition flag        if((($operator == '=' || $operator == '<-') && $condValue) ||(($operator == '!=' || $operator == '!<-') && !$condValue)) {          $cond = true;        } else {          $cond = false;        }        // Sets the cutter according to the operator condition        if (!$operatorExp || $operatorExp == '|') {          $cut = ($cut || $cond);        } else {          $cut = ($cut && $cond);        }                }    }    // Processes cutifnull.		if ($config['cutifnull']) {      $cut = $cut || (        isset($config['_value']) ?        empty($config['_value']) :        empty($config['value'])      );    }            return $cut;   }	/**	 * Checks if there is a table name in the field.	 * If not, add the table name in the config to the field name	 *	 * @param $tableName string (table name)	 * @param $fieldName string (field name)	 * @param $data array (data in which the value should be found)	 *	 * @return mixed (the field value)	 */  public function getValue($tableName, $fieldName, &$data) {    if (!is_array($data)) {      return '';    }      if (strpos($fieldName, '.') === false) {      if (array_key_exists($tableName . '.' . $fieldName, $data)) {        return $data[$tableName . '.' . $fieldName];      } else {        // It is an alias        return $data[$fieldName];      }    } else {      return $data[$fieldName];    }  }	/**	 * Processes the title field of a view.	 * It replaces tags including language tags by their values	 *	 * @param $title string (title field to process)	 * @param $data array (data in which the value should be found)	 *	 * @return string (Title after processing)	 */  public function processTitle($title, &$data) {    $out = '';    if (is_array($title)) {      $titleStr = $title['config']['field'];			// Check if ###self### or ###this### reference is used      preg_match_all('/###this\[([^\]]*)\]###/', $titleStr, $matches);      foreach($matches[0] as $key => $match) {        $urlParameters = array();        if ($matches[1][$key]) {           $temp = explode('=', $matches[1][$key]);          $param = $temp[0];          switch ($param) {            case 'where':              $value = $this->cryptTag($temp[1]);              break;            default:              $value = $temp[1];              break;          }          $formParams = array(            $param => $value,          );          $urlParameters = array(            'sav_libray' => $this->compressParams($formParams),          );        }             $titleStr = str_replace(          $matches[0][$key],          $this->cObj->getTypoLink_URL(            $GLOBALS['TSFE']->page['uid'],            $urlParameters          ),          $titleStr        );      }            						// Checks if ###self### or ###this### reference is used and replace it by the page id      $titleStr = str_replace(        '###self###',        $this->cObj->getTypoLink_URL($GLOBALS['TSFE']->page['uid']),        $titleStr      );      $titleStr = str_replace(        '###this###',        $this->cObj->getTypoLink_URL($GLOBALS['TSFE']->page['uid']),        $titleStr      );            // Processes localization tags      $titleStr = $this->processLocalizationTags($titleStr);            // Checks if tags are used      preg_match_all('/###([^\.#]+)[\.]?([^#]*)###/', $titleStr, $matches);      $temp['config'] = $title['config'];      foreach($matches[0] as $key => $match) {        if ($matches[2][$key]) {          // Gets the configuration field if any          $cryptedField = $this->cryptTag($matches[1][$key] . '.' . $matches[2][$key]);          $temp = $this->extConfig['views'][$this->formConfig[$this->viewName]][$this->folderTab]['fields'][$cryptedField];          if (!is_array($temp)) {            $temp['config'] = array(              'table' => $matches[1][$key],              'field' => $matches[2][$key],            );          }          $config = $this->getConfig($temp);          $config['_value'] = $this->getValue(            $config['table'],            $config['field'],            $data          );          $config['value'] = $this->getValue(            $config['table'],            $config['field'],            $data          );          // If it's a showAll view, the field tags should be replaced by their labels          if ($this->viewName == 'showAll') {            $mA[$match] = $this->getLL_db('LLL:EXT:' . $this->extKey .              '/locallang_db.xml:' . $config['fullFieldName']);            // Checks if an orderLinkInTitle was added in the configuration.            if ($config['orderlinkintitle']) {              $extGETVars = $this->uncompressParams(t3lib_div::_GET('sav_library'));              // Setups a configuration with link only              if (!$config['orderlinkintitlesetup']) {                $config['orderlinkintitlesetup'] = ':link:';              }              // Processes the configuration              if (preg_match('/([^:]*):([^:]*):([^:]*)/', strtolower($config['orderlinkintitlesetup']), $matchesSetup)) {                              $value = '';                foreach ($matchesSetup as $keySetup => $matchSetup) {                  if ($keySetup > 0) {                    switch(trim($matchSetup)) {                      case 'value':                        $value .= utils::htmlSpanElement(                          array(),                          $mA[$match]                        );                        break;                      case 'link':                        if ($extGETVars['where'] == $this->cryptTag($config['field'] . '+')) {                          $whereTag = $this->cryptTag($config['field'] . '-');                        } else {                          $whereTag = $this->cryptTag($config['field'] . '+');                        }                        $formParams = array(                          'where' => $whereTag,                        );                        $value .= utils::htmlSpanElement(                          array(),                          $this->buildLinkTP($mA[$match], $formParams)                        );                        break;                      case 'asc':                        $iconAsc = ($extGETVars['where'] == $this->cryptTag($config['field'] . '+') ? 'orderAscSelected.gif' : 'orderAsc.gif');                        $value .= $this->buildLinkTP(                          utils::htmlImgElement(                            array(                              utils::htmlAddAttribute('class', 'orderAsc'),                              utils::htmlAddAttribute('src', $this->iconsDir . $iconAsc),                              utils::htmlAddAttribute('title', $this->getLibraryLL('button.orderAsc')),                              utils::htmlAddAttribute('alt', $this->getLibraryLL('button.orderAsc')),                            )                          ),                          array('where' => $this->cryptTag($config['field'] . '+'))                        );                        break;                      case 'desc':                        $iconDesc = ($extGETVars['where'] == $this->cryptTag($config['field'] . '-') ? 'orderDescSelected.gif' : 'orderDesc.gif');                        $value .= $this->buildLinkTP(                          utils::htmlImgElement(                            array(                              utils::htmlAddAttribute('class', 'orderDesc'),                              utils::htmlAddAttribute('src', $this->iconsDir . $iconDesc),                              utils::htmlAddAttribute('title', $this->getLibraryLL('button.orderDesc')),                              utils::htmlAddAttribute('alt', $this->getLibraryLL('button.orderDesc')),                            )                          ),                          array('where' => $this->cryptTag($config['field'] . '-'))                        );                        break;                      case 'ascdesc':                        $iconAsc = ($extGETVars['where'] == $this->cryptTag($config['field'] . '+') ? 'orderAscSelected.gif' : 'orderAsc.gif');                        $iconDesc = ($extGETVars['where'] == $this->cryptTag($config['field'] . '-') ? 'orderDescSelected.gif' : 'orderDesc.gif');                        $value .= utils::htmlDivElement(                          array(                            utils::htmlAddAttribute('class', 'orderAscDesc'),                          ),                          $this->buildLinkTP(                            utils::htmlImgElement(                              array(                                utils::htmlAddAttribute('class', 'orderAscAbove'),                                utils::htmlAddAttribute('src', $this->iconsDir . $iconAsc),                                utils::htmlAddAttribute('title', $this->getLibraryLL('button.orderAsc')),                                utils::htmlAddAttribute('alt', $this->getLibraryLL('button.orderAsc')),                              )                            ),                            array('where' => $this->cryptTag($config['field'] . '+'))                          ) . $this->buildLinkTP(                            utils::htmlImgElement(                              array(                                utils::htmlAddAttribute('class', 'orderDescBelow'),                                utils::htmlAddAttribute('src', $this->iconsDir . $iconDesc),                                utils::htmlAddAttribute('title', $this->getLibraryLL('button.orderDesc')),                                utils::htmlAddAttribute('alt', $this->getLibraryLL('button.orderDesc')),                              )                            ),                            array('where' => $this->cryptTag($config['field'] . '-'))                          )                        );                        break;                    }                  }                }                $mA[$match] = $value;              }            }          } elseif ($func = $this->getFunc($config)) {            $mA[$match] = $this->itemviewers->$func($config);          }        } else {          // If it's a showAll view, the field tags should be replaced by their labels          // if they exist otherwise aliases are tried.          if ($this->viewName == 'showAll') {            // Uses the localTable by default            $mA[$match] = $this->getLL_db('LLL:EXT:' . $this->extKey .              '/locallang_db.xml:' . $this->tableLocal . '.' . $matches[1][$key]);            if (!$mA[$match]) {              // Tries the alias              $mA[$match] =  $data[$matches[1][$key]];            }          } else {            // It's an alias, just gets the value            $mA[$match] =  $data[$matches[1][$key]];                            }        }      }      $out = $this->cObj->substituteMarkerArrayCached(        $titleStr,        $mA,        array(),        array()      );    }    return ($out ? $out : '&nbsp;');  }	/**	 * Generates the form from an identifier	 *	 * @param $name string (identifier)	 * @param $error string (errors if any)	 *	 * @return string (the whole content result, wraped as plugin)	 */	public function buildForm($name, $errors=''){    // Starts the local performance counter in debug mode    if ($this->debug & self::DEBUG_PERFORMANCE) {      utils::startTimer($this->extKey, __FUNCTION__);    }    // Saves the name    $this->viewName = $name;		// Gets the rows from a query    $func = trim($this->savlibraryConfig['queriers']['select'][$name]);		$rows = $this->queriers->$func(      $this->extConfig['queries'][$this->formConfig['query']],      $this->uid    );				// Checks for errors in query		if ($rows === false) {		  $this->addError(        'error.incorrectQuery',        $name . ' (' . $this->extKey . ')'      );      return $this->showErrors();    }    // Makes html special characters for all output		$rows = $this->hscRecurs($rows);		    // Gets the querier performance counter in debug mode    if ($this->debug & self::DEBUG_PERFORMANCE) {      $this->debugPerformance(__FUNCTION__, ' -> Querier');      utils::startTimer($this->extKey, __FUNCTION__);    }		// Gets the view from the rows		if (!$this->formConfig[$name]) {		  $this->addError('error.unknownFormName', $name);		        return $this->showErrors();    }    $func = trim($this->savlibraryConfig['viewers'][$name]);		$ta = $this->viewers->$func(      $rows,      $this->extConfig['views'][$this->formConfig[$name]],      $errors    );    // Removes void lines    $out = $this->replaceTemplate($ta);		$out = preg_replace('/[ ]+[\n\r]+/', '', $out);				// Builds the form		$out = $this->wrapForm($out, $hidden, $this->formName);		    // Gets the viewer performance counter in debug mode    if ($this->debug & self::DEBUG_PERFORMANCE) {      $this->debugPerformance(__FUNCTION__, ' -> Viewer');    }    return $out;			}	   	/**	 * Wraps views to get a form with name	 *	 * @param $content string (content of the form)	 * @param $hidden array (hidden fields for the form)	 * @param $name string (name of the form)	 * @param $url string (url associated with the action attribute)	 *	 * @return string (the whole content result)	 */	protected function wrapForm($content, $hidden=array(), $name='', $url='#') {    $htmlArray = array();     // Processes hidden parameters    if (count($hidden)) {       $hiddenParams = '';      foreach($hidden as $key=>$value) {        $hiddenParams .= utils::htmlInputHiddenElement(          array(            utils::htmlAddAttribute('name', $key),            utils::htmlAddAttribute('value', $value),          )        );      }     }        // Displays messages if any    if (count($this->messages)) {      $htmlArray[] = $this->showMessages();       }        // Displays erros if any    if (count($this->errors)) {      $htmlArray[] = $this->showErrors();       }         // Displays the form    $htmlArray[] = '<form method="post" name="' . $name .      '" enctype="multipart/form-data" action="' .      htmlspecialchars($GLOBALS['TSFE']->anchorPrefix . $url) . '" >';    if ($hiddenParams) {      $htmlArray[] = $hiddenParams;    }     // Displays the content    $htmlArray[] = $content;    $htmlArray[] = '</form>';       		return implode($this->WRAP, $htmlArray);	}	/**	 * Crypts a tag	 *	 * @param $tag string	 *	 * @return string (crypted tag)	 */  public function cryptTag($tag) {    return 'a' . md5($tag);  }  	/***************************************************************/	/* Admin methods                                               */	/***************************************************************/	/**	 * Checks if the user is a plugin Administrator for the field	 *	 * @param $data (data in which the InputAdminField value is searched)	 * @param $plus (if not null, check if the user is an Administrator + for the field)	 *	 * @return boolean ()	 */	public function userIsAdmin(&$data, $plus=0) {    if (!$this->conf['inputAdminField']) {       return true;  // if no Admin field, returns true    } else {      // Gets the value associated with inputAdminField in the data      $dataValue = $this->getValue(        $this->tableLocal,        $this->conf['inputAdminField'],        $data      );      $fieldValue = html_entity_decode(        $dataValue . ($plus ? '+' : ''),        ENT_QUOTES      );      // An Admin field was set. Checks if the user TS config contains      // either the field value or * (super admin)  		$inputAdminConf = $GLOBALS['TSFE']->fe_user->getUserTSconf();      // Checks if the fied value is set      if (!$fieldValue) {        return false;      }      // Condition on date   		    $time = time();      $conditionInputDate = (        $this->conf['inputStartDate'] &&        ($time >= $this->conf['inputStartDate']) &&        $this->conf['inputEndDate'] &&        ($time <= $this->conf['inputEndDate'])      );      // Checks if the the user is an admin for the field      $conditionFieldAdmin = true;      switch ($this->conf['inputAdminField']) {        case 'cruser_id':          // Checks if the user created the record          if ($fieldValue != $GLOBALS['TSFE']->fe_user->user['uid']) {            $conditionFieldAdmin = false;          }          break;        default:          $conditionFieldAdmin = (            strpos($inputAdminConf[$this->extKey . '_Admin'], $fieldValue) === false ?            false :            true          );        break;      }      // Checks if the user has the admin attribute      $conditionSuperAdmin = $this->userIsSuperAdmin();      // Sets the final condition according to the limit      switch ($this->conf['inputApplyLimit']) {      	case self::NOBODY:          $condition = (            $conditionSuperAdmin ||            $conditionFieldAdmin          );          break;        case self::ALL:          // The condition is applied to all users including super Admin          $condition = $conditionInputDate;          break;        case self::ADMIN_PLUS_USER:          // The condition is applied to admin Plus users          $conditionInputDate = (            $plus ?            $conditionInputDate :            false          );          $condition = (            $conditionSuperAdmin ||            ($conditionFieldAdmin && $conditionInputDate)          );          break;        case self::ALL_EXCLUDING_SUPER_ADMIN:          $condition = $conditionSuperAdmin;          break;        default:          $condition = false;          break;      }  		return $condition;  	}	}	/**	 * Checks if the user is a super admin for the extension	 *	 * @ (none)	 *	 * @return boolean ()	*/  public function userIsSuperAdmin() {  	$inputAdminConf = $GLOBALS['TSFE']->fe_user->getUserTSconf();  	    return ($inputAdminConf[$this->extKey . '_Admin']=='*');  }  	/**	 * Checks if the user is allowed to export data	 *	 * @ (none)	 *	 * @return boolean ()	*/  public function userIsAllowedToExportData() {  	$inputAdminConf = $GLOBALS['TSFE']->fe_user->getUserTSconf();    // Condition on inputAdminConf    $cond_inputAdminConf = ($inputAdminConf[$this->extKey . '_Export'] == '*');        return $cond_inputAdminConf;  }	/**	 * Checks if the user is allowed to change data in the form	 *	 * @ (none)	 *	 * @return boolean ()	*/  public function userIsAllowedToInputData() {    // Checks if the user is authenticated    if(empty($GLOBALS['TSFE']->fe_user->user))      return false;      	$inputAdminConf = $GLOBALS['TSFE']->fe_user->getUserTSconf();    // Condition on date   		  $time = time();    $cond_inputDate = (      $this->conf['inputStartDate'] &&      ($time >= $this->conf['inputStartDate']) &&      $this->conf['inputEndDate'] &&      ($time <= $this->conf['inputEndDate'])    );  	switch ($this->conf['inputApplyLimit']) {  	  case self::NOBODY:        $cond_inputDate = true;      case self::ALL:        // The condition is applied to all users including super Admin        break;      case self::ADMIN_PLUS_USER:        // The condition will be checked in userIsAdmin and applied to admin Plus users        $cond_inputDate = true;        break;      case self::ALL_EXCLUDING_SUPER_ADMIN:        // Checks if the user is super Admin.        $cond_inputDate = ($this->userIsSuperAdmin() ?          true :          $cond_inputDate        );        break;    }  	// Condition on allowedGroups    $res = (      count(        array_intersect(          explode(',', $this->conf['allowedGroups']),          array_keys($GLOBALS['TSFE']->fe_user->groupData['uid'])        )      ) > 0 ?      true :      false    );    $cond_allowedGroups = ($this->conf['allowedGroups'] ? $res : true);    return $this->conf['inputOnForm'] && $cond_allowedGroups && $cond_inputDate;  }		/**	 * Checks if input is allowed in the form	 *	 * @ (none)	 *	 * @return boolean ()	*/	public function inputIsAllowedInForm() {    if ($this->conf['allowedGroups']) {      $res = (        array_intersect(          explode(',', $this->conf['allowedGroups']),          array_keys($GLOBALS['TSFE']->fe_user->groupData['uid'])        ) ?        true :        false      );      if ($res) {        return $this->inputMode ;            } else {        return false;      }    } else {      return $this->conf['inputOnForm'] && $this->inputMode ;    }	}	/**	 * Checks if the user belongs to an allowed group	 *	 * @ (none)	 *	 * @return boolean ()	*/	public function userBelongsToAllowedGroup() {    if ($this->conf['allowedGroups']) {      $res = (        array_intersect(          explode(',', $this->conf['allowedGroups']),          array_keys($GLOBALS['TSFE']->fe_user->groupData['uid'])        ) ?        true :        false      );      if ($res) {        return true ;      } else {        return false;      }    } else {      return false;    }	}	/***************************************************************/	/* Language methods                                            */	/***************************************************************/	/**	 * Gets the TCA label.	 *	 * @param $TCAlabel string (TCA field label)	 *	 * @return string (label)	 */	public function getLL_db($TCAlabel) {		return($GLOBALS['TSFE']->sL($TCAlabel));	}	/**	 * Gets the label in the locallang.xml file in the sav_library or	 * in the sav_library_extends if loaded	 *	 * @param $label string (label)	 * @param $addMessage string (additional message)	 *	 * @return string (label)	 */  public function getLibraryLL($label, $addMessage = '') {    $message = $GLOBALS['TSFE']->sL('LLL:EXT:sav_library/locallang.xml:' . $label);    if (!$message) {      if (t3lib_extMgm::isLoaded('sav_library_extends')) {        $message = $GLOBALS['TSFE']->sL('LLL:EXT:sav_library_extends/locallang.xml:' . $label);      }       if (!$message) {        $this->addError('error.missingLabel', $label);        return '';      }    }      return sprintf($message, $addMessage);  }	/**	 * Gets the label in the locallang.xml file in the extension.	 *	 * @param $label string (label)	 * @param $error string (If set and the label does not exist, an error message is produced)	 *	 * @return string (label)	 */    public function getExtLL($label, $error = '1') {      return (      ($message = $this->extObj->pi_getLL($label)) ?      $message :      ($error ? $this->addError('error.missingLabel', $label) : $label)    );  }	/**	 * Processes contant tags	 *	 * @param $value string (string to process)	 *	 * @return string ()	 */  public function processConstantTags($value) {    // Processes constants    if (preg_match_all('/\$\$\$constant\[([^\]]+)\]\$\$\$/', $value, $matches)) {      foreach ($matches[1] as $keyMatch => $valueMatch) {        if (defined($valueMatch) ) {          $value = str_replace($matches[0][$keyMatch], constant($valueMatch), $value);        }      }    }    return $value;  } 	/**	 * Processes localization tags	 *	 * @param $value string (string to process)	 *	 * @return string ()	 */  public function processLocalizationTags($value) {    // Processes labels associated with fields    if (preg_match_all('/\$\$\$label\[([^\]]+)\]\$\$\$/', $value, $matches)) {      foreach ($matches[1] as $keyMatch => $valueMatch) {        // Checks if the label is in locallang_db.xml, no default table is assumed        // In that case the full name must be used, i.e. tableName.fieldName        $label = $this->getLL_db(          'LLL:EXT:' . $this->extKey.'/locallang_db.xml:' . $valueMatch        );        if (!empty($label)) {          $value = str_replace($matches[0][$keyMatch], $label, $value);        } else {          // Checks if the label is in locallang_db.xml, the local table is assumed          $label = $this->getLL_db(            'LLL:EXT:' . $this->extKey.'/locallang_db.xml:' .            $this->tableLocal . '.' . $valueMatch          );          if (!empty($label)) {            // Found in locallang_db.xml file, replaces it            $value = str_replace($matches[0][$keyMatch], $label, $value);          } else {            $this->addError('error.missingLabel', $valueMatch);          }        }      }    }    // Checks if the label is in the locallang.xml file    preg_match_all('/\$\$\$([^\$]+)\$\$\$/', $value, $matches);    foreach ($matches[1] as $keyMatch => $valueMatch) {      $label = $this->getExtLL($valueMatch);      $value = str_replace($matches[0][$keyMatch], $label, $value);    }    return $value;  }    	/**	 * Processes marker tags	 *	 * @param $value string (string to process)	 * @param $data array (data used to replace markers)	 * @param $additionalData array (additional data used to replace markers)	 *	 * @return string ()	 */  public function processMarkerTags($value, &$data, $additionalData = array()) {    $tempData = array_merge($data, $additionalData);    preg_match_all('/###(([^\.#]+)\.?([^#]*))###/', $value, $matches);    foreach ($matches[1] as $keyMatch => $valueMatch) {      if ($matches[3][$keyMatch]) {        // It's a full field name, i.e. tableName.fieldName        if (array_key_exists($matches[1][$keyMatch], $tempData)) {          $mA[$matches[0][$keyMatch]] = $tempData[$matches[1][$keyMatch]];        } else {          // Unknown marker          $this->addError('error.unknownMarker', $matches[0][$keyMatch]);        }      } else {        // Checks if it's an alias        if (array_key_exists($matches[1][$keyMatch], $tempData)) {          $mA[$matches[0][$keyMatch]] = $tempData[$matches[1][$keyMatch]];        } elseif (array_key_exists($this->tableLocal . '.' . $matches[1][$keyMatch], $tempData)) {        // Local table was omitted          $mA[$matches[0][$keyMatch]] = $tempData[$this->tableLocal . '.' . $matches[1][$keyMatch]];        } else {          // Unknown marker          $this->addError('error.unknownMarker', $matches[0][$keyMatch]);        }      }    }        return $this->cObj->substituteMarkerArrayCached(      $value,      $mA,      array(),      array()    );  }	/**	 * Converts applicable characters to html entities taking into account the charset	 *	 * @param $string string (string to process)	 *	 * @return string ()	 */  public function htmlentitiesWithCharset($string) {    return htmlentities(      $GLOBALS['TSFE']->csConvObj->conv($string, $GLOBALS['TSFE']->metaCharset, 'utf-8'),      ENT_COMPAT,      'UTF-8'    );  }    	/***************************************************************/	/* Message and error methods                                   */	/***************************************************************/  	/**	 * Transforms an array of HTML code into HTML code	 *	 * @return  string	 */  public function arrayToHTML($htmlArray, $noHTMLprefix=false) {    if ($noHTMLprefix) {		  return  implode('', $htmlArray);    } else {		  return  implode($this->EOL . $this->SPACE, $htmlArray);    }  }	/**	 * Adds a message to the messages array	 *	 * @param $messageLabel string (message label)	 * @param $addMessage string (additional message)	 * @param $class string (class)	 *	 * @return  (none)	 */  public function addMessage($messageLabel, $addMessage='', $class='') {    $message['label'] = $messageLabel;    $message['text'] = $this->getLibraryLL($messageLabel, $addMessage);    $message['class'] = $class;    $this->messages[] = $message;  }	/**	 * Adds a message to the messages array only once	 *	 * @param $messageLabel string (message label)	 * @param $addMessage string (additional message)	 * @param $class string (class)	 *	 * @return  (none)	 */  public function addMessageOnce($messageLabel, $addMessage='', $class='') {    // If the message already exists, just return it    foreach($this->messages as $message) {      if ($message['label'] == $messageLabel) {        return;      }    }    // If we are here, the label was not found    $this->addMessage($messageLabel, $addMessage, $class);  }	/**	 * Adds an error to the errors array	 *	 * @param $errorLabel string (error label)	 * @param $addMessage string (additionalmessage)	 *	 * @return string (void string)	 */  public function addError($errorLabel, $addMessage='') {    $error['label'] = $errorLabel;    $error['text'] = $this->getLibraryLL($errorLabel, $addMessage);    $this->errors[] = $error;    return '';  }	/**	 * Adds an error to the errors array only once	 *	 * @param $messageLabel string (message label)	 * @param $addMessage string (additional message)	 *	 * @return  (none)	 */  public function addErrorOnce($errorLabel, $addMessage='') {    // If the error already exists, just return    foreach($this->errors as $error) {      if ($error['label'] == $errorLabel) {        return;      }    }    // If we are here, the label was not found    $this->addError($errorLabel, $addMessage);  }	/**	 * Processes a fatal error	 *	 * @param $errorLabel string (error label)	 * @param $addMessage string (additionalmessage)	 *	 * @return none	 */  public function processFatalError($errorLabel, $addMessage='') {      $this->addError('fatal.' . $errorLabel, $addMessage);    return $this->showErrors();  }	/**	 * Displays the errors	 *	 * @ (none)	 *	 * @return string (error list)	 */	public function showErrors() {			if(!$this->errors) {			return '';		} else {		  // Errors		  if ($this->errors) {		    $htmlArray = array();  			$htmlArray[] = '<div class="sav-library-errors">';        $htmlArray[] = '  <ul>';  			foreach($this->errors as $error) {          $htmlArray[] = '    <li class="error">' . $error['text'] . '</li>';        }        $htmlArray[] = '  </ul>';        $htmlArray[] = '</div>';      }      			return $this->arrayToHTML($htmlArray);		}	}	/**	 * Displays the messages	 *	 * @ (none)	 *	 * @return string (message list)	 */	public function showMessages() {		if(!$this->messages) {			return '';		} else {				  // Messages		  if ($this->messages) {		    $htmlArray = array();  			$htmlArray[] = '<div class="sav-library-messages">';  			$htmlArray[] = '  <ul>';  			foreach($this->messages as $message) {          $htmlArray[] = '    <li class="' .            ($message['class'] ? $message['class'] : 'message') .            '">' . $message['text'] . '</li>';        }        $htmlArray[] = '  </ul>';        $htmlArray[] = '</div>';      }					return $this->arrayToHTML($htmlArray);		}	}	/**	 * Returns true if there is an error in a new form	 *	 * @ (none)	 *	 * @return boolean (True in case of error)	 */  public function errorInNewForm() {    return $this->errorInForm && $this->isNewForm;  }	/**	 * Returns the error	 *	 * @param $index integer (error index)	 *	 * @return string (error)	 */  public function getError($index) {    return $this->errors[$index]['text'];  }	/**	 * Returns the error label. Used in test cases	 *	 * @param $index integer (error index)	 *	 * @return string (error label)	 */  public function getErrorLabel($index) {    return $this->errors[$index]['label'];  }  	/***************************************************************/	/* Other methods                                               */	/***************************************************************/  public function debugPerformance($functionName, $message) {    utils::stopTimer($this->extKey, 'main');    t3lib_div::devlog(      sprintf('%6.4f: %s for %s in %s',        utils::getTimer($this->extKey, $functionName), $message, $this->formConfig['title'], $functionName      ),      $this->extKey    );    utils::restartTimer($this->extKey, 'main');  }  	/**	 * Builds a string to compress parameters which will be used with the	 * extension. Mainly, the method replaces the form parameter by	 * an integer. Same process occurs for form actions	 *	 * @param $params array (parameter array)	 *	 * @return string (compressed parameter string)	 */  public function compressParams($params) {    $out = '';    foreach($params as $keyParam => $valueParam) {      $key = array_search($keyParam, $this->formParams);      if ($key === false) {        $this->addError('error.unknownFormParam', $keyParam);        return '';      } else {        $out .= dechex($key);      }      switch ($keyParam) {        case 'formAction':          $key = array_search($valueParam, $this->formActions);          if ($key === false) {            $this->addError('error.unknownFormAction', $valueParam);            return '';          } else {            $out .= sprintf('%02x%s',strlen($key), $key);          }          break;        default:          $out .= sprintf('%02x%s',strlen($valueParam), $valueParam);          break;      }    }    return $out;  }	/**	 * Builds an array from a compressed string	 * Mainly, the method splits the string to recover the parameter and its value	 *	 * @param $compressedString string (compressed string)	 *	 * @return array (parameter array)	 */  public function uncompressParams($compressedString) {    // Checks if there is a fragment in the link    $posFragment = strpos($compressedString, '#');    if ($posFragment !== false) {      $compressedString = substr($compressedString, 0, $posFragment);    }    $out = array();    while ($compressedString) {      // Reads the form param index      list($param) = sscanf($compressedString, '%1x');      $formParam = $this->formParams[$param];      if (!$formParam) {        $this->addError('error.unknownFormParam', $param);      }      $compressedString = substr($compressedString, 1);      // Reads the length      list($length) = sscanf($compressedString, '%2x');      $compressedString = substr($compressedString, 2);      // Reads the value      list($value) = sscanf($compressedString, '%' . $length . 's');      $compressedString = substr($compressedString, $length);      switch($formParam) {        case 'formAction':          $out[$formParam] = $this->formActions[$value];          if (!$out[$formParam]) {            $this->addError('error.unknownFormAction', $value);          }          break;        case 'formName':          if($value != hash($this->conf['formNameHashAlgo'], $this->formName)) {            return NULL;          }          break;        default:          $out[$formParam] = $value;          break;      }    }    return $out;  }  	/**	 * Returns a results browser.	 *	 * It use almost the same code as pi_broweresults. Links were modified to deal	 * with the SAV Library Extension Generator. First, Last, Previous, Next were	 * replaced by buttons	 *	 * The configuration paramaters are given through the $conf array. They are	 * almost the same as in pi_broweresults.	 *	 * Using $conf['res_count'], $conf['results_at_a_time'] and $conf['maxPages'] for count number,	 *     how many results to show and the max number of pages to include in the browse bar.	 * Using $conf['dontLinkActivePage'] as switch if the active (current) page should be displayed as pure text or as a link to itself	 * Using $conf['showFirstLast'] as switch if the two links named "<< First" and "LAST >>" will be shown and point to the first or last page.	 * Using $conf['pagefloat']: this defines were the current page is shown in the list of pages in the Pagebrowser.	 *    If this var is an integer it will be interpreted as position in the list of pages. If its value is the keyword "center" the current page will be shown in the middle of the pagelist.	 * Using $conf['showRange']: this var switches the display of the pagelinks from pagenumbers to ranges f.e.: 1-5 6-10 11-15... instead of 1 2 3...	 *	 * Added configurations:	 * Using $conf['pointerName'] as pointer name to the data in the formParams array	 * Using $conf['cache'] as flag to add a cHash to the browser links	 *	 * @param	$conf array (configuration array)	 * @param	$formParam array (form parameter array. It must contain the pointer value and the formAction browse or browseSubForm)	 * @param	$wrapArr array		Array with elements to overwrite the default $wrapper-array.	 * @return	string		HTML output for the  browser,	 */	function browseresults($conf, $formParams, $wrapArr=array())	{			// Initializing variables:		$pointerName = $conf['pointerName'];		$pointer = intval($formParams[$pointerName]);		$count = intval($conf['res_count']);		$results_at_a_time = t3lib_div::intInRange($conf['results_at_a_time'], 1, 1000);		$totalPages = ceil($count / $results_at_a_time);    if (empty($conf['maxPages'])) {      $conf['maxPages'] = 10;    }		$maxPages = t3lib_div::intInRange($conf['maxPages'], 1, 100);		$cache = $conf['cache'];			// $showResultCount determines how the results of the pagerowser will be shown.			// If set to 0: only the result-browser will be shown			//	 		 1: (default) the text "Displaying results..." and the result-browser will be shown.			//	 		 2: only the text "Displaying results..." will be shown		$showResultCount = intval($showResultCount);			// if this is set, two links named "<< First" and "LAST >>" will be shown and point to the very first or last page.		$showFirstLast = $conf['showFirstLast'];			// if this has a value the "previous" button is always visible (will be forced if "showFirstLast" is set)		$alwaysPrev = $showFirstLast ? 1 : $this->extObj->pi_alwaysPrev;		if (isset($conf['pagefloat'])) {			if (strtoupper($conf['pagefloat']) == 'CENTER') {				$pagefloat = ceil(($maxPages - 1) / 2);			} else {				// pagefloat set as integer. 0 = left, value >= $this->internal['maxPages'] = right				$pagefloat = t3lib_div::intInRange($conf['pagefloat'], -1, $maxPages - 1);			}		} else {			$pagefloat = -1; // pagefloat disabled		}			// default values for "traditional" wrapping with a table. Can be overwritten by vars from $wrapArr		$wrapper = array(			'browseBoxWrap' => '|',			'showResultsWrap' => '<div class="showResultsWrap">|</div>',			'browseLinksWrap' => '<div class="browseLinksWrap">|</div>',			'showResultsNumbersWrap' => '<span class="showResultsNumbersWrap">|</span>',			'disabledLinkWrap' => '<span class="disabledLinkWrap">|</span>',			'inactiveLinkWrap' => '<span class="inactiveLinkWrap">|</span>',			'activeLinkWrap' => '<span class="activeLinkWrap">|</span>'		);			// Now overwrite all entries in $wrapper which are also in $wrapArr		$wrapper = array_merge($wrapper, $wrapArr);		if ($showResultCount != 2) { //show pagebrowser			if ($pagefloat > -1) {				$lastPage = min($totalPages, max($pointer + 1 + $pagefloat, $maxPages));				$firstPage = max(0, $lastPage - $maxPages);			} else {				$firstPage = 0;				$lastPage = t3lib_div::intInRange($totalPages, 1, $maxPages);			}			$links = array();				// Make browse-table/links:			if ($showFirstLast) { // Link to first page				if ($pointer > 0)	{          $formParams[$pointerName] = '';					$links[] = $this->cObj->wrap(            $this->buildLinkTP(              utils::htmlImgElement(                array(                  utils::htmlAddAttribute('class', 'backwardFirstButton'),                  utils::htmlAddAttribute('src', $this->iconsDir . 'backwardFirst.png'),                  utils::htmlAddAttribute('title', $this->getLibraryLL('button.backwardFirst')),                  utils::htmlAddAttribute('alt', $this->getLibraryLL('button.backwardFirst')),                )              ),              $formParams,              $cache            ),            $wrapper['inactiveLinkWrap']          );				} else {					$links[] = $this->cObj->wrap(              utils::htmlImgElement(                array(                  utils::htmlAddAttribute('class', 'backwardFirstButton'),                  utils::htmlAddAttribute('src', $this->iconsDir . 'backwardFirst.png'),                  utils::htmlAddAttribute('title', $this->getLibraryLL('button.backwardFirst')),                  utils::htmlAddAttribute('alt', $this->getLibraryLL('button.backwardFirst')),                )              ),            $wrapper['disabledLinkWrap']          );				}			}			if ($alwaysPrev >= 0)	{ // Link to previous page				if ($pointer > 0)	{          $formParams[$pointerName] = ($pointer - 1 ? $pointer - 1 : '');					$links[] = $this->cObj->wrap(            $this->buildLinkTP(              utils::htmlImgElement(                array(                  utils::htmlAddAttribute('class', 'backwardButton'),                  utils::htmlAddAttribute('src', $this->iconsDir . 'backward.png'),                  utils::htmlAddAttribute('title', $this->getLibraryLL('button.backward')),                  utils::htmlAddAttribute('alt', $this->getLibraryLL('button.backward')),                )              ),              $formParams,              $cache            ),            $wrapper['inactiveLinkWrap']          );				} elseif ($alwaysPrev)	{					$links[] = $this->cObj->wrap(            utils::htmlImgElement(              array(                utils::htmlAddAttribute('class', 'backwardButton'),                utils::htmlAddAttribute('src', $this->iconsDir . 'backward.png'),                utils::htmlAddAttribute('title', $this->getLibraryLL('button.backward')),                utils::htmlAddAttribute('alt', $this->getLibraryLL('button.backward')),              )            ),            $wrapper['disabledLinkWrap']          );				}			}			for($a = $firstPage; $a < $lastPage; $a++)	{ // Links to pages				if ($conf['showRange']) {					$pageText = (($a*$results_at_a_time)+1) . '-' . min($count,(($a+1)*$results_at_a_time));				} else {					$pageText = trim($this->extObj->pi_getLL('pi_list_browseresults_page','Page',$hscText) . ' ' . ($a+1));				}				if ($pointer == $a) { // current page					if ($conf['dontLinkActivePage']) {						$links[] = $this->cObj->wrap(              $pageText,              $wrapper['activeLinkWrap']            );					} else {            $formParams[$pointerName] = ($a ? $a : '');						$links[] = $this->cObj->wrap(              $this->buildLinkTP(                $pageText,                $formParams,                $cache              ),              $wrapper['activeLinkWrap']            );					}				} else {          $formParams[$pointerName] = ($a ? $a : '');					$links[] = $this->cObj->wrap(            $this->buildLinkTP(              $pageText,              $formParams,              $cahe            ),            $wrapper['inactiveLinkWrap']          );				}			}			if ($pointer < $totalPages - 1 || $showFirstLast)	{				if ($pointer == $totalPages - 1) { // Link to next page					$links[] = $this->cObj->wrap(            utils::htmlImgElement(              array(                utils::htmlAddAttribute('class', 'forwardButton'),                utils::htmlAddAttribute('src', $this->iconsDir . 'forward.png'),                utils::htmlAddAttribute('title', $this->getLibraryLL('button.forward')),                utils::htmlAddAttribute('alt', $this->getLibraryLL('button.forward')),              )            ),            $wrapper['disabledLinkWrap']          );				} else {          $formParams[$pointerName] = $pointer + 1;					$links[] = $this->cObj->wrap(            $this->buildLinkTP(              utils::htmlImgElement(                array(                  utils::htmlAddAttribute('class', 'forwardButton'),                  utils::htmlAddAttribute('src', $this->iconsDir . 'forward.png'),                  utils::htmlAddAttribute('title', $this->getLibraryLL('button.forward')),                  utils::htmlAddAttribute('alt', $this->getLibraryLL('button.forward')),                )              ),              $formParams,              $cache            ),            $wrapper['inactiveLinkWrap']          );				}			}			if ($showFirstLast) { // Link to last page				if ($pointer < $totalPages - 1) {          $formParams[$pointerName] = $totalPages - 1;					$links[] = $this->cObj->wrap(            $this->buildLinkTP(              utils::htmlImgElement(                array(                  utils::htmlAddAttribute('class', 'forwardLastButton'),                  utils::htmlAddAttribute('src', $this->iconsDir . 'forwardLast.png'),                  utils::htmlAddAttribute('title', $this->getLibraryLL('button.forwardLast')),                  utils::htmlAddAttribute('alt', $this->getLibraryLL('button.forwardLast')),                )              ),              $formParams,              $cache            ),            $wrapper['inactiveLinkWrap']          );				} else {					$links[] = $this->cObj->wrap(            utils::htmlImgElement(              array(                utils::htmlAddAttribute('class', 'forwardLastButton'),                utils::htmlAddAttribute('src', $this->iconsDir . 'forwardLast.png'),                utils::htmlAddAttribute('title', $this->getLibraryLL('button.forwardLast')),                utils::htmlAddAttribute('alt', $this->getLibraryLL('button.forwardLast')),              )            ),            $wrapper['disabledLinkWrap']          );				}			}			$theLinks = $this->cObj->wrap(        implode(chr(10),$links),$wrapper['browseLinksWrap']      );		} else {			$theLinks = '';		}		$pR1 = $pointer * $results_at_a_time + 1;		$pR2 = $pointer * $results_at_a_time + $results_at_a_time;		if ($showResultCount) {			if ($wrapper['showResultsNumbersWrap']) {				// this will render the resultcount in a more flexible way using markers (new in TYPO3 3.8.0).				// the formatting string is expected to hold template markers (see function header).        // Example: 'Displaying results ###FROM### to ###TO### out of ###OUT_OF###'				$markerArray['###FROM###'] = $this->cObj->wrap(          $conf['res_count'] > 0 ? $pR1 : 0,          $wrapper['showResultsNumbersWrap']        );				$markerArray['###TO###'] = $this->cObj->wrap(          min($conf['res_count'],$pR2),          $wrapper['showResultsNumbersWrap']        );				$markerArray['###OUT_OF###'] = $this->cObj->wrap(          $conf['res_count'],          $wrapper['showResultsNumbersWrap']        );				$markerArray['###FROM_TO###'] = $this->cObj->wrap(          ($conf['res_count'] > 0 ? $pR1 : 0) . ' ' .          $this->extObj->pi_getLL('pi_list_browseresults_to', 'to') . ' ' .          min($conf['res_count'], $pR2),          $wrapper['showResultsNumbersWrap']        );				$markerArray['###CURRENT_PAGE###'] = $this->cObj->wrap(          $pointer + 1,          $wrapper['showResultsNumbersWrap']        );				$markerArray['###TOTAL_PAGES###'] = $this->cObj->wrap(          $totalPages,          $wrapper['showResultsNumbersWrap']        );				// substitute markers				$resultCountMsg = $this->cObj->substituteMarkerArray(          $this->extObj->pi_getLL(            'pi_list_browseresults_displays',            'Displaying results ###FROM### to ###TO### out of ###OUT_OF###'          ),          $markerArray        );			} else {				// Renders the resultcount in the "traditional" way using sprintf				$resultCountMsg = sprintf(					str_replace(            '###SPAN_BEGIN###',            '<span' . $this->extObj->pi_classParam('browsebox-strong') . '>',            $this->extObj->pi_getLL(              'pi_list_browseresults_displays',              'Displaying results ###SPAN_BEGIN###%s to %s</span> out of ###SPAN_BEGIN###%s</span>'            )          ),					$count > 0 ? $pR1 : 0,					min($count,$pR2),					$count);			}			$resultCountMsg = $this->cObj->wrap(        $resultCountMsg,        $wrapper['showResultsWrap']      );		} else {			$resultCountMsg = '';		}		$sTables = $this->cObj->wrap(      $resultCountMsg . $theLinks,      $wrapper['browseBoxWrap']    );		return $sTables;	}  	/**	 * Builds a link to the current page.	 *	 * @param $str string (string associated with the link)	 * @param $formParams array (form parameters)	 * @param $cache integer (set to 1 if the page should be cached)	 * @param $addpHash boolean (if true, phash is added to the form parameters)	 *	 * @return string (link)	 */  public function buildLinkTP($str, $formParams, $cache = 0, $additionalParams = array()) {    $formParams = array_merge(      array(        'formName' => hash($this->conf['formNameHashAlgo'], $this->formName),      ),      $formParams    );        // Builds the parameter array    $params = array(      'sav_library' => $this->compressParams($formParams),    );    $params = array_merge($params, $additionalParams);    $out = $this->pi_linkTP($str, $params, $cache);    return $out;  }    	/**	 * Links string to the current page.	 *	 * Same as the same function in the pi_base class with a configuration added for URL fragment (section)	 *	 * Returns the $str wrapped in <a>-tags with a link to the CURRENT page, but with $urlParameters set as extra parameters for the page.	 *	 * @param	string		The content string to wrap in <a> tags	 * @param	array		Array with URL parameters as key/value pairs. They will be "imploded" and added to the list of parameters defined in the plugins TypoScript property "parent.addParams" plus $this->pi_moreParams.	 * @param	boolean		If $cache is set (0/1), the page is asked to be cached by a &cHash value (unless the current plugin using this class is a USER_INT). Otherwise the no_cache-parameter will be a part of the link.	 * @param	integer		Alternative page ID for the link. (By default this function links to the SAME page!)	 * @return	string		The input string wrapped in <a> tags	 */	function pi_linkTP($str, $urlParameters=array(), $cache=0, $altPageId=0)	{		$conf=array();		$conf['useCacheHash'] = $this->extObj->pi_USER_INT_obj ? 0 : $cache;		$conf['no_cache'] = $this->extObj->pi_USER_INT_obj ? 0 : !$cache;		$conf['parameter'] = $altPageId ? $altPageId : ($this->extObj->pi_tmpPageId ? $this->extObj->pi_tmpPageId : $GLOBALS['TSFE']->id);		$conf['additionalParams'] = $this->conf['parent.']['addParams'].t3lib_div::implodeArrayForUrl('',$urlParameters,'',1).$this->extObj->pi_moreParams;    if ($this->conf['addFragment']) {		  $conf['section'] = $this->cObj->data['uid'];    }				return $this->cObj->typoLink($str, $conf);	}	/**	 * Builds a link to a page.	 *	 * @param $str string (string associated with the link)	 * @param $id integer (page id)	 * @param $target (Target value to use. Affects the &type-value of the URL, defaults to current.)	 * @param $formParams array (form parameters)	 *	 * @return string (link)	 */  public function buildLinkToPage($str, $id, $target = '', $formParams) {    // Gets the form name    $formName = $formParams['formName'];    unset($formParams['formName']);        $formParams = array_merge(      array(        'formName' => hash($this->conf['formNameHashAlgo'], $formName),      ),      $formParams    );    // Builds the parameter array    $params = array(      'sav_library' => $this->compressParams($formParams),    );    $out = $this->extObj->pi_linkToPage($str, $id, $target, $params);    return $out;  }  	/**	 * Adds special markers to array	 *	 * @param $markerArray array (array in which the markers are added)	 * if the marker already exists in the markerArray, it is not overloaded	 *	 * @return integer (none)	 */  public function addSpecialMarkersToArray(&$markerArray) {    // ###uid### marker    $tempArray['###uid###'] = $this->uid;        // ###user### marker    $tempArray['###user###'] = $GLOBALS['TSFE']->fe_user->user['uid'];    // ###STORAGE_PID### marker    $temp = $GLOBALS['TSFE']->getStorageSiterootPids();    $tempArray['###STORAGE_PID###'] = $temp['_STORAGE_PID'];    // ###CURRENT_PID### marker    $tempArray['###CURRENT_PID###'] = $GLOBALS['TSFE']->page['uid'];        $markerArray = array_merge($tempArray, (array)$markerArray);  }  	/**	 * Converts a date into timestamp	 *	 * @param $date string (date to convert)	 * @param $config array (configuration)	 * @param $error string (out parameter - error message)	 *	 * @return integer (timestamp)	 */	public function date2timestamp($date , &$config, &$error) { 		// Provides a default format    if (!$config['format']){      $format = ($config['eval']=='date' ? '%d/%m/%Y' : '%d/%m/%Y %H:%M');    } else {      $format = $config['format'];    }		// Variable array   		$var = array(		  'd' => array('type' => 'day', 'pattern' => '([0-9]{2})'),		  'e' => array('type' => 'day', 'pattern' => '([ 0-9][0-9])'),		  'H' => array('type' => 'hour', 'pattern' => '([0-9]{2})'),		  'I' => array('type' => 'hour', 'pattern' => '([0-9]{2})'),		  'm' => array('type' => 'month', 'pattern' => '([0-9]{2})'),		  'M' => array('type' => 'minute', 'pattern' => '([0-9]{2})'),		  'S' => array('type' => 'second', 'pattern' => '([0-9]{2})'),		  'Y' => array('type' => 'year', 'pattern' => '([0-9]{4})'),		  'y' => array('type' => 'year_without_century', 'pattern' => '([0-9]{2})'),		  );		// Intialises the variables		foreach ($var as $key => $val) {			$$val = 0;		}    // Builds the expression to match the string according to the format    preg_match_all('/%([deHImMSYy])([^%]*)/', $format, $matchesFormat);    $exp = '/';    foreach ($matchesFormat[1] as $key => $match) {      $exp .= $var[$matchesFormat[1][$key]]['pattern'] .        '(?:' . str_replace('/', '\/', $matchesFormat[2][$key]) . ')';    }    $exp .= '/';		$out = 0;    if ($date) {      if(!preg_match($exp, $date, $matchesDate)) {  			$error = 'error.incorrectDateFormat';  			return $date;          } else {        unset($matchesDate[0]);        foreach($matchesDate as $key => $match) {          $res[$matchesFormat[1][$key-1]] = $match;        }         }		  // Sets the variables		  foreach($res as $key => $val) {        if(array_key_exists($key, $var)) {          $$var[$key]['type'] = $val;				  } else {					$error = 'error.incorrectDateOption';          return '';                }		  }		  // Deals with year without century		  if ($year_without_century && !$year) {			  $year = 2000 + $year_without_century;		  }					  $out = mktime($hour, $minute, $second, $month, $day, $year);    }    return $out;	}  	/***************************************************************/	/* Button methods                                              */	/***************************************************************/	/**	 * Edit button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Edit link)	 */	public function editButton($formName, $uid) {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'editButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'edit.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.edit')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.edit')),      )    );    $formParams = array(      'formAction' => 'editBtn',      'uid' => $uid,    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}	/**	 * Save button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 * @param $addJS string (additional JS)	 *	 * @return string (Save link)	 */	public function saveButton($formName, $uid, $addJS = '') {    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'saveButton'),        utils::htmlAddAttribute('name', $formName . '[saveBtn]'),        utils::htmlAddAttribute('src', $this->iconsDir . 'savedok.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.save')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.save')),        utils::htmlAddAttribute('onclick', 'updateTextareaRTE();' . $this->selectList . $addJS),      )    );        return $out;	}	/**	 * Save and close button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Save and close link)	 */	public function saveandcloseButton($formName, $uid) {		    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'saveandcloseButton'),        utils::htmlAddAttribute('name', $formName . '[saveandcloseBtn]'),        utils::htmlAddAttribute('src', $this->iconsDir . 'saveandclosedok.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.saveandclose')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.saveandclose')),        utils::htmlAddAttribute('onclick', 'updateTextareaRTE();' . $this->selectList),      )    );    return $out;	}	/**	 * Save and show button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Save and show link)	 */	public function saveandshowButton($formName, $uid) {    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'saveandshowButton'),        utils::htmlAddAttribute('name', $formName . '[saveandshowBtn]'),        utils::htmlAddAttribute('src', $this->iconsDir . 'saveandshow.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.saveandshow')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.saveandshow')),        utils::htmlAddAttribute('onclick', 'updateTextareaRTE();' . $this->selectList),      )    );    return $out;	}	/**	 * Mail button	 *	 * @param $formName string (name of the form)	 * @param $fieldName string (Field name)	 * @param $value (if there is no value, display an icon indicating that mail is off)	 * @param $uid integer (uid)	 *	 * @return string (Mail link)	 */	public function mailButton ($formName, $fieldName, $value, $uid) {	    if ($value) {      $out = utils::htmlInputImageElement(        array(          utils::htmlAddAttribute('class', 'mailButton'),          utils::htmlAddAttribute('name', $formName . '[updateBtn][' . $fieldName . ']' .            ($uid ? '[' . $uid . ']' : '')),          utils::htmlAddAttribute('src', $this->iconsDir . 'newmail.gif'),          utils::htmlAddAttribute('title', $this->getLibraryLL('button.mail')),          utils::htmlAddAttribute('alt', $this->getLibraryLL('button.mail')),          utils::htmlAddAttribute('onclick', 'updateTextareaRTE();' . $this->selectList),        )      );    } else {      $out = utils::htmlImgElement(        array(          utils::htmlAddAttribute('class', 'mailButton'),          utils::htmlAddAttribute('src', $this->iconsDir . 'newmail_off.gif'),          utils::htmlAddAttribute('title', $this->getLibraryLL('button.mail')),          utils::htmlAddAttribute('alt', $this->getLibraryLL('button.mail')),        )      );    }        return $out;	}	/**	 * generateRTF button	 *	 * @param $formName string (name of the form)	 * @param $fieldName string (Field name)	 * @param $uid integer (uid)	 *	 * @return string (Generate RTF link)	 */	public function generateRTFButton ($formName, $fieldName, $uid) {	    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'generateRTFButton'),        utils::htmlAddAttribute('name', $formName . '[updateBtn][' . $fieldName . ']' .          ($uid ? '[' . $uid . ']' : '')),        utils::htmlAddAttribute('src', $this->iconsDir . 'generatertf.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.generateRTF')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.generateRTF')),        utils::htmlAddAttribute('onclick', 'updateTextareaRTE();' . $this->selectList),      )    );    return $out;	}		/**	 * Close button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Close link)	 */	public function closeButton($formName, $uid) {	    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'closeButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'closedok.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.close')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.close')),      )    );    $formParams = array(      'formAction' => 'closeBtn',      'uid' => $uid,    );    $out = $this->buildLinkTP(      $image,      $formParams,      ($this->inputMode ? 0 : ($this->conf['caching'] & self::CLOSE_BUTTON ? 1 : 0 ))    );		return $out;	}		/**	 * Export button	 *	 * @param $formName string (name of the form)	 *	 * @return string (Export link)	 */  public function exportButton($formName) {	    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'exportButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'export.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.export')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.export')),      )    );    $formParams = array(      'formAction' => 'exportBtn',    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}		/**	 * Exportok button	 *	 * @param $formName string (name of the form)	 *	 * @return string (Exportok link)	 */	public function exportokButton($formName) {	    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'exportokButton'),        utils::htmlAddAttribute('name', $formName . '[exportokBtn]'),        utils::htmlAddAttribute('src', $this->iconsDir . 'exportok.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.export')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.export')),        utils::htmlAddAttribute('onclick', 'updateTextareaRTE();' . $this->selectList),      )    );    return $out;	}	/**	 * New button	 *	 * @param $formName string (name of the form)	 *	 * @return string (New link)	 */	public function newButton($formName) {	    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'newButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'new.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.new')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.new')),      )    );    $formParams = array(      'formAction' => 'newBtn',    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}		/**	 * New button in subform	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 * @param $subformName string (name of the subform) 	 *	 * @return string (New in subform link)	 */	public function newButtonSubForm($formName, $uid, $subformName) {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'newButtonSubForm'),        utils::htmlAddAttribute('src', $this->iconsDir . 'new.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.new')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.new')),        utils::htmlAddAttribute('onclick', 'return update();'),      )    );    $formParams = array(      'formAction' => 'newBtnSubForm',      'uid' => $uid,      'subFormName' => $subformName,    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}	/**	 * Left arrow button	 *	 * @param $formName string (name of the form)	 * @param $limit integer (limit parameter of formName) 	 *	 * @return string (Left arrow link)	 */	public function leftArrowButton($formName, $limit) {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'leftArrowButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'leftarrow.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.leftArrow')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.leftArrow')),      )    );    $formParams = array(      'formAction' => 'leftArrowBtn',      'limit' => $limit,    );    $out = $this->buildLinkTP(      $image,      $formParams,      ($this->conf['caching'] & self::ARROWS_IN_FORM ? 1 : 0 )    );		return $out;	}		/**	 * Left arrow button in subform	 *	 * @param $formName string (name of the form)	 * @param $limit integer (limitSub parameter of formName)	 * @param $uid integer (uid parameter of formName) 	 *	 * @return string (Left arrow link in subform)	 */	public function leftArrowButtonSubForm($formName, $limit, $uid, $field='') {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'leftArrowButtonSubForm'),        utils::htmlAddAttribute('src', $this->iconsDir . 'leftarrow.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.leftArrow')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.leftArrow')),        utils::htmlAddAttribute('onclick', 'return update();'),      )    );        $formParams = array(      'formAction' => 'leftArrowBtnSubForm',      'limitSub' => $limit,      'uid' => $uid,      'field' => $field,    );    $out = $this->buildLinkTP(      $image,      $formParams,      ($this->conf['caching'] & self::ARROWS_IN_SUBFORM ? 1 : 0 )    );		return $out;	}	/**	 * Right arrow button	 *	 * @param $formName string (name of the form)	 * @param $limit integer (limit parameter of formName) 	 *	 * @return string (Right arrow link)	 */	public function rightArrowButton($formName, $limit) {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'rightArrowButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'rightarrow.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.rightArrow')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.rightArrow')),      )    );    $formParams = array(      'formAction' => 'rightArrowBtn',      'limit' => $limit,    );    $out = $this->buildLinkTP(      $image,      $formParams,      ($this->conf['caching'] & self::ARROWS_IN_FORM ? 1 : 0 )    );		return $out;	}	/**	 * Right arrow button in subform	 *	 * @param $formName string (name of the form)	 * @param $limit integer (limitSub parameter of formName)	 * @param $uid integer (uid parameter of formName) 	 *	 * @return string (Right arrow link in subform)	 */	public function rightArrowButtonSubForm($formName, $limit, $uid, $field='') {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'rightArrowButtonSubForm'),        utils::htmlAddAttribute('src', $this->iconsDir . 'rightarrow.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.rightArrow')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.rightArrow')),        utils::htmlAddAttribute('onclick', 'return update();'),      )    );    $formParams = array(      'formAction' => 'rightArrowBtnSubForm',      'limitSub' => $limit,      'uid' => $uid,      'field' => $field,    );    $out = $this->buildLinkTP(      $image,      $formParams,      ($this->conf['caching'] & self::ARROWS_IN_SUBFORM ? 1 : 0 )    );		return $out;	}		/**	 * Delete button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Delete link)	 */	public function deleteButton($formName, $uid) {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'deleteButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'deletedok.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.delete')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.delete')),        utils::htmlAddAttribute('onclick', 'return confirm(\'' .          $this->getLibraryLL('warning.delete') . '\');'),      )    );    $formParams = array(      'formAction' => 'deleteBtn',      'uid' => $uid,    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}	/**	 * Input mode button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Input mode link)	 */	public function inputModeButton($formName, $uid) {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'inputModeButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'toggle.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.inputMode')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.inputMode')),      )    );    $formParams = array(      'formAction' => 'inputModeBtn',      'uid' => $uid,    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}	/**	 * Toggle mode button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Toggle mode link)	 */	public function toggleModeButton($formName, $uid) {	    $iconFile = ($this->inputMode ? 'leaveEditMode.gif' : 'enterEditMode.gif');    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'toggleModeButton'),        utils::htmlAddAttribute('src', $this->iconsDir . $iconFile),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.toggleMode')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.toggleMode')),      )    );    $formParams = array(      'formAction' => 'toggleModeBtn',      'uid' => $uid,    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}	/**	 * Search button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Search link)	 */	public function searchButton($formName, $uid) {    $out = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'searchButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'search.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.search')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.search')),        utils::htmlAddAttribute('onclick', 'document.' . $formName .          '.formAction.value=\'searchBtn\';document.' . $formName .          '.uid.value=' . $uid . ';'),      )    );    return $out;	}	/**	 * Print button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Print link)	 */	public function printButton($formName, $uid) {	    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'printButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'print.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.print')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.print')),      )    );    $formParams = array(      'formAction' => 'printBtn',      'uid' => $uid,    );    $additionalParams = array(      'print' => 1,      'cid' => $this->cObj->data['uid'],    );    $out = $this->buildLinkTP($image, $formParams, 0, $additionalParams);    		return $out;	}		/**	 * Help button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Help link)	 */	public function helpButton($formName, $uid=0) {	    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'helpButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'helpbubble.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.help')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.help')),        utils::htmlAddAttribute('onclick', 'vHWin=window.open(\'' .          htmlentities($this->extObj->pi_getPageLink(            $this->conf['helpPage'], '', array('help'=>1))          ) . '\',\'viewHelp\',\'height=500,width=600,status=0,menubar=0,scrollbars=1\'); ' .          'vHWin.focus();return false;'),      )    );    $formParams = array(      'formAction' => 'helpBtn',      'uid' => $uid,    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}	/**	 * Up button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 * @param $uidItem integer (uidItem parameter of formName)	 * @param $field string (field parameter of formName)	 *	 * @return string (Up link)	 */	public function upButton ($formName, $uid, $uidItem, $field='') {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'upButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'up.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.up')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.up')),        utils::htmlAddAttribute('onclick', 'return update();'),      )    );    $formParams = array(      'formAction' => 'upBtn',      'uid' => $uid,      'uidItem' => $uidItem,      'field' => $field,    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}	/**	 * Down button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 * @param $uidItem integer (uidItem parameter of formName)	 * @param $field string (field parameter of formName)	 *	 * @return string (Down link)	 */	public function downButton ($formName, $uid, $uidItem, $field='') {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'downButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'down.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.down')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.down')),        utils::htmlAddAttribute('onclick', 'return update();'),      )    );    $formParams = array(      'formAction' => 'downBtn',      'uid' => $uid,      'uidItem' => $uidItem,      'field' => $field,    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}	/**	 * Delete item button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 * @param $uidItem integer (uidItem parameter of formName)	 * @param $field string (field parameter of formName)	 *	 * @return string (Delete item link)	 */	public function deleteItemButton ($formName, $uid, $uidItem, $field='') {    $image = utils::htmlImgElement(      array(        utils::htmlAddAttribute('class', 'deleteItemButton'),        utils::htmlAddAttribute('src', $this->iconsDir . 'deletedok.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.deleteItem')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.deleteItem')),        utils::htmlAddAttribute('onclick', 'return confirm(\'' .          $this->getLibraryLL('warning.delete') . '\');'),      )    );    $formParams = array(      'formAction' => 'deleteItemBtn',      'uid' => $uid,      'uidItem' => $uidItem,      'field' => $field,    );    $out = $this->buildLinkTP($image, $formParams);		return $out;	}	/**	 * Submit Form button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Submit Form button)	 */	public function submitButton($formName, $uid) {	    $out = utils::htmlInputSubmitElement(      array(        utils::htmlAddAttribute('class', 'submitButton'),        utils::htmlAddAttribute('value', $this->getLibraryLL('button.submit')),      )    );    $out .= utils::htmlInputHiddenElement(      array(        utils::htmlAddAttribute('name', $formName . '[formAction]'),        utils::htmlAddAttribute('value', 'updateForm'),      )    );		return $out;  }	/**	 * Submit Admin Form button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Submit Admin Form button)	 */	public function submitAdminButton($formName, $uid) {	    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'submitAdminButton'),        utils::htmlAddAttribute('name', $formName . '[submitAdminBtn]'),        utils::htmlAddAttribute('value', $this->getLibraryLL('button.submit')),        utils::htmlAddAttribute('src', $this->iconsDir . 'submitadmin.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.submit')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.submit')),      )    );        $out .= utils::htmlInputHiddenElement(      array(        utils::htmlAddAttribute('name', $formName . '[formAction]'),        utils::htmlAddAttribute('value', 'updateFormAdmin'),      )    );    		return $out;  }	/**	 * User Submit Form button	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Submit Form button)	 */	public function user_submitButton($formName, $uid) {	    $out = utils::htmlInputSubmitElement(      array(        utils::htmlAddAttribute('class', 'submitButton'),        utils::htmlAddAttribute('value', $this->getLibraryLL('button.submit')),      )    );        $out .= utils::htmlInputHiddenElement(      array(        utils::htmlAddAttribute('name', $formName . '[formAction]'),        utils::htmlAddAttribute('value', 'updateForm' .          ($this->inputIsAllowedInForm() ? 'Admin' : '')        ),      )    );    		return $out;  }  	/**	 * Save export configuration	 *	 * @param $formName string (name of the form)	 *	 * @return string (Link)	 */	public function saveExportConfiguration($formName) {	    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'saveExportConfiguration'),        utils::htmlAddAttribute('name', $formName . '[saveExportConfiguration]'),        utils::htmlAddAttribute('src', $this->iconsDir . 'save_export_configuration.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.saveExportConfiguration')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.saveExportConfiguration')),      )    );		return $out;  }	/**	 * Delete export configuration	 *	 * @param $formName string (name of the form)	 *	 * @return string (Link)	 */	public function deleteExportConfiguration($formName) {	    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'deleteExportConfiguration'),        utils::htmlAddAttribute('name', $formName . '[deleteExportConfiguration]'),        utils::htmlAddAttribute('src', $this->iconsDir . 'delete_export_configuration.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.deleteExportConfiguration')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.deleteExportConfiguration')),        utils::htmlAddAttribute('onclick', 'return confirm(\'' .          $this->getLibraryLL('warning.delete') . '\');'),      )    );		return $out;  }	/**	 * Load export configuration	 *	 * @param $formName string (name of the form)	 *	 * @return string (Link)	 */	public function loadExportConfiguration($formName) {	    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'loadExportConfiguration'),        utils::htmlAddAttribute('name', $formName . '[loadExportConfiguration]'),        utils::htmlAddAttribute('src', $this->iconsDir . 'load_export_configuration.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.loadExportConfiguration')),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.loadExportConfiguration')),      )    );		return $out;  }	/**	 * Toggle export configuration	 *	 * @param $formName string (name of the form)	 * @param $toggle integer (flag)	 *	 * @return string (Link)	 */	public function toggleExportDisplay($formName, $toggle) {	    $out = utils::htmlInputImageElement(      array(        utils::htmlAddAttribute('class', 'toggleExportDisplay'),        utils::htmlAddAttribute('name', $formName . '[toggleExportDisplay]'),        utils::htmlAddAttribute('src', $this->iconsDir . 'toggle_export_display.gif'),        utils::htmlAddAttribute('title', $this->getLibraryLL('button.toggleExportDisplay_' . $toggle)),        utils::htmlAddAttribute('alt', $this->getLibraryLL('button.toggleExportDisplay_' . $toggle)),      )    );		return $out;  }  	/**	 * Save + Save and Close + Close buttons	 *	 * @param $formName string (name of the form)	 * @param $uid integer (uid parameter of formName)	 *	 * @return string (Save + Save and Close + Close links)	 */	  public function saveButtons($formName, $uid) {  		$out = $this->saveButton($formName, $uid);		$out .= $this->saveandshowButton($formName, $uid);		$out .= $this->saveandcloseButton($formName, $uid);		$out .= $this->closeButton($formName, $uid);    $out .= utils::htmlInputHiddenElement(      array(        utils::htmlAddAttribute('name', $formName . '[formAction]'),        utils::htmlAddAttribute('value', ''),      )    );		return $out;	}	/***************************************************************/	/* JavaScript methods                                          */	/***************************************************************/	/**	 * JS Code for the delete warning	 *	 * @param $formName string (name of the form)	 *	 * @return string (Javascript code)	 */	public function generateJSWarning($formName) {			$JScode = '      <script type="text/javascript">      /*<![CDATA[*/      <!--            function updateTextareaRTE() {' . $this->itemviewers->updateRTEList . '        return true;      }      function changedTextareaRTE(x) {        if (RTEarea[x]["editor"]._undoPos>0) {          document.changed = true;                  }      }            function update()	{                // Take rtehtmlarea into account        ' . $this->changedRTEList . '                if (document.changed) {          if (confirm("' . $this->getLibraryLL('warning.save') . '"))	{            document.' . $formName . '[\'' . $formName . '[formAction]\'].value="saveBtn";            ' . ($this->selectList ? $this->selectList . ';' : '') . '            updateTextareaRTE();           document.' . $formName . '.submit();            return false;          }			          return true;        }         return true;      }      // -->      /*]]>*/      </script>      ';	return $JScode;	}    /***************************************************************/  /* Condition methods                                       	   */  /***************************************************************/  	/**	 * Check if two parameters are equal	 *	 * @param $x (first parameter)	 * @param $y (second parameter)	 *	 * @return boolean (true if $x == $y)	*/    public function isEqual($x, $y) {    return ($x == $y);  }	/**	 * Check if the second parameter is in the first parameter considered as a string	 *	 * @param $x (first parameter)	 * @param $y (second parameter)	 *	 * @return boolean (true if $x is in $y)	*/    public function isInString($x, $y) {    return (!(strpos($x, $y) === false));  }	/**	 * Check if the second parameter is not in the first parameter considered as a string	 *	 * @param $x (first parameter)	 * @param $y (second parameter)	 *	 * @return boolean (true if $x is not in $y)	*/    public function isNotInString($x, $y) {    return ((strpos($x, $y) === false));  }  	/**	 * Check if the parameter is an array	 *	 * @param $x (parameter to check)	 *	 * @return boolean (true if $x is an array)	*/      public function isArray($x) {    return (is_array($x));  }	/**	 * Check if the parameter is not an array	 *	 * @param $x (parameter to check)	 *	 * @return boolean (true if $x is not an array)	*/       public function isNotArray($x) {    return (!is_array($x));  }    /**	 * Check if a key exists in an array	 *	 * @param $x (an array)	 * @param $y (the key to check)   *	 * @return boolean (true if $y is a key in $x)	*/      public function arrayKeyExists($x, $y) {    if (is_array($x)) {      return(array_key_exists($y, $x));        }    return (false);  }	/**	 * Check if the parameter is null	 *	 * @param $x (parameter to check)	 *	 * @return boolean (true if $x is null)	*/     public function isNull($x) {    return (is_null($x));  }	/**	 * Check if the parameter is not null	 *	 * @param $x (parameter to check)	 *	 * @return boolean (true if $x is not null)	*/     	  public function isNotNull($x) {    return (!is_null($x));  }		/**	 * Check if the form is in input mode	 *	 * @return boolean (true if the input mode is active)	*/     public function isInputMode() {    return ($this->inputMode ? true : false);  }	/**	 * Check if the form is not in input mode	 *	 * @return boolean (true if the input mode is not active)	*/     public function isNotInputMode() {    return ($this->inputMode ? false : true);  }	/**	 * Check if the user is member of a group	 *	 * @return boolean (true if the current user is a member of the group)	*/     public function isGroupMember($group) {      if (!$group) {      return false;    }        $rows = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(      /* SELECT   */	'uid',      /* FROM     */	'fe_groups',      /* WHERE    */	'title="' . $group . '"'  	);    return in_array(      $rows[0]['uid'],      explode(',', $GLOBALS['TSFE']->fe_user->user['usergroup'])    );  }	/**	 * Check if the user is member of a group	 *	 * @return boolean (true if the current user is not a member of the group)	*/     public function isNotGroupMember($group) {       if (!$group) {      return true;    }        $rows = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(      /* SELECT   */	'uid',      /* FROM     */	'fe_groups',      /* WHERE    */	'title="' . $group . '"'  	);    return !in_array(      $rows[0]['uid'],      explode(',', $GLOBALS['TSFE']->fe_user->user['usergroup'])    );  }  /***************************************************************/  /* Make methods                                       	       */  /***************************************************************/	/**	 * Generate the xml label 	 *	 * @param $value string (value to display)	 * @param $uid string (not used)	 * @param $params array (parameters)	 *	 * @return string (xml label)	 */  public function makeXmlLabel ($value, $uid='', $params=array()) {	  $special = $params['funcspecial'];		return $GLOBALS['TSFE']->sL($params['xmllabel' . $special] . $value);	}   	/**	 * Create an image	 *	 * @param $value string (value to display)	 * @param $uid string (not used)	 * @param $params array (parameters)	 *	 * @return string (image)	 */	public function makeImage ($value, $uid='', $params=array()) {		if (!$value) return('');	  $special = $params['funcspecial'];		$folder = $params['folder' . $special] ? $params['folder' . $special] : '.';				if ($params['tsproperties']) {      $out = $this->cObj->IMAGE($params['tsproperties']);    } else {      $out = utils::htmlImgElement(        array(          utils::htmlAddAttribute('src', $folder . '/' . $value),          utils::htmlAddAttributeIfNotNull('width', $params['width' . $special]),          utils::htmlAddAttributeIfNotNull('height', $params['height' . $special]),          utils::htmlAddAttribute('title', (            $params['title' . $special] ?            $params['title' . $special] :            $params['alt' . $special]            )          ),          utils::htmlAddAttribute('alt', $params['alt' . $special]),        )      );    }        return $out;	}	/**	 * Create an item link	 *	 * @param $value string (value to display)	 * @param $uid string (uid parameter of formName)	 * @param $params array (parameters)	 *	 * @return string (link)	 */	public function makeItemLink ($value, $uid='', $params=array()) {	  $special = $params['funcspecial'];    $formParams = array(      'formAction' => (        $params['updateform' . $special] ?        'updateForm' :        ($params['inputform' . $special] ? 'inputForm' : 'showSingle')      ),      'uid' => $uid,    );        // Add parameter to access to a folder tab (page is an alias)    if ($params['page' . $special]) {      $formParams['folderTab'] =        $this->cryptTag($params['page' . $special]);    }    if ($params['foldertab' . $special]) {      $formParams['folderTab'] =        $this->cryptTag($params['foldertab' . $special]);    }    return $this->buildLinkTP($value, $formParams, 1);	}	/**	 * Create an extension link	 *	 * @param $value string (value to display)	 * @param $uid string (uid parameter of formName)	 * @param $params array (parameters)	 *	 * @return string (link)	 */		public function makeExtLink ($value, $uid='', $params=array()) {	  $special = $params['funcspecial'];    $formName = $params['ext' . $special] . (      $params['contentid' . $special] ?      '_' . $params['contentid' . $special] :      ''    );    $formParams = array(      'formName' => $formName,      'formAction' => 'showSingle',      'uid' => ($this->rowItem ? $params['_value'] : $uid),    );        // Add parameter to access to a folder tab (page is an alias)    if ($params['page' . $special]) {      $formParams['folderTab'] =        $this->cryptTag($params['page' . $special]);    }    if ($params['foldertab' . $special]) {      $formParams['folderTab'] =        $this->cryptTag($params['foldertab' . $special]);    }        // Check if the link should be displayed	    if ($params['restrictlinkto'] . $special) {      if (preg_match('/###usergroup[ ]*(!?)=[ ]*(.*?)###/', $params['restrictlinkto' . $special], $match)) {        $rows = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(				  /* SELECT   */	'uid,title',				  /* FROM     */	'fe_groups',	 			  /* WHERE    */	'title=\'' . $match[2] . '\'' .            $this->cObj->enableFields('fe_groups')		    );        $cond = (bool)$match[1] ^ in_array($rows[0]['uid'], explode(',',$GLOBALS['TSFE']->fe_user->user['usergroup'])); 	        return (          $cond ?          $this->buildLinkToPage(            $value,            $params['pageid' . $special],            '',            $formParams          ) :          $value        );      } else {        return $this->buildLinkToPage(          $value,          $params['pageid' . $special],          '',          $formParams        );      }    } else {      return $this->buildLinkToPage(        $value,        $params['pageid' . $special],        '',        $formParams      );    }	}	/**	 * Create an email link	 *	 * @param $value string (value to display)	 * @param $uid string (not used)	 * @param $params array (parameters)	 *	 * @return string (link)	 */	public function makeEmailLink ($value, $uid='', $params=array()) {	  $special = $params['funcspecial'];    $message = ($params['message' . $special] ?      $params['message' . $special] :      $value    );		$TSconf = array(      'parameter'  => (        $params['link' . $special] ?        $params['link' . $special] :        $value      ),    );      	return $this->cObj->typolink($message, $TSconf);	}	/**	 * Create a link and open in a new window	 *	 * @param $value string (value to display)	 * @param $uid string (not used)	 * @param $params array (parameters)	 *	 * @return string (link)	 */	public function makeNewWindowLink ($value, $uid='', $params='') {	  $special = $params['funcspecial'];    $message = (      $params['message' . $special] ?      $params['message' . $special] :      $value    );    $params['windowurl' . $special] = preg_replace(      '/###special\[([^\]]*)\]###/e',      '$params[\'special\'][\'$1\']',      $params['windowurl' . $special]    );    $params['windowtext' . $special] = preg_replace(      '/###special\[([^\]]*)\]###/e',      '$params[\'special\'][\'$1\']',      $params['windowtext' . $special]    );    $windowBodyStyle = (      $params['windowbodystyle' . $special] ?      ' style="' . $params['windowbodystyle' . $special] . '"' :      ''    );		$TSconf = array(		  'bodyTag' => '<body' . $windowBodyStyle . '>' . (        $params['windowtext' . $special] ?        $params['windowtext' . $special] . '<br />' :        ''      ),      'enable'  => 1,      'JSwindow'  => 1,      'wrap' => '<a href="javascript:close();"> | </a>',      'JSwindow.' => array(          'newWindow'  => 1,          'expand' => '20,' . ($params['windowtext' . $special] ? '40' : '20'),      ),        );    return $this->cObj->imageLinkWrap(      $message,      $params['windowurl' . $special],      $TSconf    );	}	/**	 * Create an internal link	 *	 * @param $value string (value to display)	 * @param $uid string (not used)	 * @param $params array (parameters)	 *	 * @return string (link)	 */		public function makeLink ($value, $uid='', $params=array()) {	  $special = $params['funcspecial'];		$folder = (      $params['folder' . $special] ?      $params['folder' . $special] :      '.'    );    $message = (      $params['message' . $special] ?      $params['message' . $special] :      $value    );		$TSconf = array(      'parameter'  => (        $value ?        (          $params['setuid' . $special] ?          $params['setuid' . $special] :          (            $params['valueisuid' . $special] ?            $params['_value'] :            $folder . '/' . $value          )        ) :        ''      ),      'target'  => $params['target' . $special],      'ATagParams' => (        $params['class' . $special] ?        'class="' . $params['class' . $special] . '" ' :        ''      ),    );      	return $this->cObj->typolink($message, $TSconf);	}		/**	 * Create a link for an external url	 *	 * @param $value string (value to display)	 * @param $uid string (not used)	 * @param $params array (parameters)	 *	 * @return string (link)	 */		public function makeUrlLink ($value, $uid='', $params=array()) {	  $special = $params['funcspecial'];    $message = (      $params['message' . $special] ?      $params['message' . $special] :      $value    );		$TSconf = array(      'parameter'  => (        $params['link' . $special] ?        $params['link' . $special] :        $params['_value']      ),      'extTarget'  => '_blank',    );      	return $this->cObj->typolink($message, $TSconf);	}	/**	 * Create a date in a given format	 *	 * @param $value string (value to display)	 * @param $uid string (not used)	 * @param $params array (parameters)	 *	 * @return string (formated date)	 */		public function makeDateFormat ($value, $uid='', $params=array()) {	  $special = $params['funcspecial'];	  $format = (      $params['format' . $special] ?      $params['format' . $special] :      ($params['eval' . $special]=='datetime' ? '%d/%m/%Y %H:%M' : '%d/%m/%Y')    );		return strftime($format, $value);	}  /***************************************************************  * Database methods                                          ***************************************************************/	/**	 * Query for deleting.	 *	 */	public function queries_delete(&$query) {    $func = trim($this->savlibraryConfig['queriers']['delete']);		$this->queriers->$func($query, $this->uid);	}	/**	 * Query for updating.	 *	 */	public function queries_update(&$query) {    $func = trim($this->savlibraryConfig['queriers']['update']);		return $this->queriers->$func($query, $this->uid);	}	/**	 * Check if it is a SELECT query	 *	 */	public function isSelectQuery($query) {    return preg_match('/^[ \r\t\n]*(?i)select[ ]*/', $query);  }  	/***************************************************************/	/* comfortable template methods                                */	/* The following code was taken from the VCD Library      */  /* @author	Elmar Hinz <elmar.hinz@vcd-berlin.de>              */ 	/***************************************************************/	public function replaceTemplate($array, $tpl="") { 		if(empty($tpl)) {			if(in_array('TYPE', array_map('strtoupper', array_keys($array)))) {				$out = $this->_doTemplateItem($array, $this->templateCode); 			} else {				$out = '<p>Unecpected call of function replaceTemplate.</p>';			} 		} else {			$out = $this->_doTemplate($array, $tpl);		}				return $out;	}	public function _doTemplate($inReps, $tpl) {		global $elmar;		if(is_array($inReps)) {			foreach($inReps as $k => $v) {				$reps[strtolower($k)] = $v;			}			$tpl = $this->_doTemplateRegions($reps[regions], $tpl);			$tpl = $this->_doTemplateMarkers($reps[markers], $tpl);			$tpl = $this->_doTemplateCutters($reps[cutters], $tpl); 		}		return $tpl;	}	public function _doTemplateRegions($containers, $tpl) {		$markers = array();		if(is_array($containers)) {			foreach($containers as $container => $items) {				$itemsTpl = $this->cObj->getSubpart($tpl, '###' . $container . '###');				$markers[$container] = $this->_doTemplateItems($items, $itemsTpl);			}		}		$MARKERS = array();		if(is_array($markers)) {			foreach($markers as $k => $v) $MARKERS['###'.$k.'###'] = $v;		}		$out = $this->cObj->substituteMarkerArrayCached($tpl, array(), $MARKERS, array());		return $out;	}	public function _doTemplateItems($items, $itemsTpl) {		if(is_array($items)) {			foreach($items as $counter => $components) {				$out .= $this->_doTemplateItem($components, $itemsTpl);			}		} else {			$out = $tpl;    }		return $out;	}	public function _doTemplateItem($components, $itemsTpl) {		if(is_array($components)) {			foreach($components as $k => $v) {				$comps[strtolower($k)] = $v;			}			$itemTpl = $this->cObj->getSubpart($itemsTpl, '###' . $comps['type'] . '###');		}		$out = $this->_doTemplate($comps, $itemTpl);		if ($components['WRAPPERS']['wrapitem']) {		  $out = $this->cObj->dataWrap($out, $components['WRAPPERS']['wrapitem']);    }		return $out;	}	public function _doTemplateMarkers($markers, $tpl) {		$MARKERS = array();		if(is_array($markers)) {			foreach($markers as $k => $v) $MARKERS['###' . $k . '###'] = $v;		}		$out = $this->cObj->substituteMarkerArrayCached($tpl, $MARKERS, array(),array());		return $out;	}	public function _doTemplateCutters($cuts, $tpl) {		$clips = array();		if(is_array($cuts)) {			foreach($cuts as $k => $v) {				$k = '###' . $k . '###';				$clips[$k] = $v ? '' : $this->cObj->getSubpart($tpl, $k);			}		}		$out = $this->cObj->substituteMarkerArrayCached($tpl, array(), $clips, array());		return $out;	}		/***************************************************************/	/* Recursive encoding and decoding                             */	/***************************************************************/	/* htmlspecialchars recursiv */	protected function hscRecurs( $in ) {		if(is_array($in)) {			foreach($in as $k => $v) {				$out[$k] = $this->hscRecurs($v);			}		} else {				$out = htmlspecialchars($in, ENT_QUOTES);		}		return $out;	}	/* addslashes recursiv */	protected function addslRecurs( $in ) {		if(is_array($in)) {			foreach($in as $k => $v) {				$out[$k] = $this->addslRecurs($v);			}		} else {			$out = addslashes($in);		}		return $out;	}	/* stripslashes recursiv */	protected function strslRecurs( $in ) {		if(is_array($in)) {			foreach($in as $k => $v) {				$out[$k] = $this->strslRecurs($v);			}		} else {			 $out = stripslashes($in);		}	return $out;	}}if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/sav_library/class.tx_savlibrary.php']) {    include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/sav_library/class.tx_savlibrary.php']);}?>