<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<T3locallang>
	<meta type="array">
		<type>CSH</type>
		<csh_table>sav_library</csh_table>
		<description>Default TCA_DESCR for the kicksarter</description>
	</meta>
	<data type="array">
		<languageKey index="default" type="array">
			<label index=".description">SAV Library</label>
			<label index=".details">
      </label>
      
		  <!-- Also  -->
			<label index="all.description"></label>
			<label index="all.seeAlso">
        sav_library:check
        sav_library:check_4
        sav_library:check_10
        sav_library:date
        sav_library:datetime
        sav_library:files
        sav_library:functions
        sav_library:general
        sav_library:input
        sav_library:link
        sav_library:radio
        sav_library:rel
        sav_library:select
        sav_library:textarea
        sav_library:textarea_rte
      </label>
      
		  <!-- checkbox  -->
			<label index="check.description">Attributes for "checkbox"</label>
			<label index="check.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
			<label index="check.syntax">
        &lt;b&gt;doNotDisplayIfNotChecked = 1;&lt;/b&gt;
        Do not display the checkbox value (that is "No") if it is not checked (obviously it does not apply when in edit mode)                       
      </label>
      
		  <!-- checkbox - 4 boxes -->
			<label index="check_4.description">Attributes for "checkbox - 4 boxes"</label>
			<label index="check_4.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
			<label index="check_4.syntax">
        &lt;b&gt;cols = number;&lt;/b&gt;
        Number of columns to display.
        
        &lt;b&gt;nbItems = number;&lt;/b&gt;
        Number of items to display.  
     
        &lt;b&gt;doNotDisplayIfNotChecked = 1;&lt;/b&gt;
        Do not display the checkbox if it is not checked (obviously it does not apply when in edit mode).            
      </label>
      			
		  <!-- checkbox - 10 boxes -->
			<label index="check_10.description">Attributes for "checkbox - 10 boxes"</label>
			<label index="check_10.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
			<label index="check_10.syntax">
        &lt;b&gt;cols = number;&lt;/b&gt;
        Number of columns to display.
        
        &lt;b&gt;nbItems = number;&lt;/b&gt;
        Number of items to display.  
     
        &lt;b&gt;doNotDisplayIfNotChecked = 1;&lt;/b&gt;
        Do not display the checkbox if it is not checked (obviously it does not apply when in edit mode).            
      </label>			
           
		  <!-- date -->
      <label index="date.description">Attributes for "date"</label>
			<label index="date.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="date.syntax">
        &lt;b&gt;format = date_format;&lt;/b&gt;
        Set a format to display the date. The format is the same as in strftime php function, e.g. format = %d/%m/%Y;
        
        &lt;b&gt;noDefault = 1;&lt;/b&gt;
        Do not display the default date and time.
      </label>  
      
		  <!-- datetime -->
      <label index="datetime.description">Attributes for "datetime"</label>
			<label index="datetime.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="datetime.syntax">
        &lt;b&gt;format = date_format;&lt;/b&gt;
        Set a format to display the date. The format is the same as in strftime php function, e.g. format = %d/%m/%Y;
        
        &lt;b&gt;noDefault = 1;&lt;/b&gt;
        Do not display the default date and time.
      </label>      

		  <!-- files -->
      <label index="files.description">Attributes for "files"</label>
			<label index="files.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="files.syntax">
        &lt;b&gt;addIcon = 1;&lt;/b&gt;
        Add an icon in front of the hyperlink associated with the file.

        &lt;b&gt;uploadFolder = path;&lt;/b&gt;
        Set the folder path where the image is stored. It overwrites  the same attribute in the TCA.
        
        &lt;b&gt;addToUploadFolder = subpath;;&lt;/b&gt;
        Add a subpath to the UploadFolder path.
        
        &lt;b&gt;addToUploadFolderFromField = field_name;&lt;/b&gt;
        Add the content of the field whose name is given by "field_name" to the uploadFolder attribute. This information is separated with an underscore.
        Example : if the field_name is "my_field" and its contents is "123", then
        AddToUploadFolderFromField = my_field; will add "_123" to the uploadFolder name.

        &lt;b&gt;size = integer;&lt;/b&gt;
        Set the size attribute.  It overwrites  the same attribute in the TCA. 
        
        &lt;b&gt;iframe = 1;&lt;/b&gt;
        Open the image in an iframe.
        
        &lt;b&gt;width = integer;&lt;/b&gt;
        Set the width of an image or of the iframe.
        
        &lt;b&gt;height = integer;&lt;/b&gt;
        Set the height of an image or of the iframe.
        
        &lt;b&gt;message = string;&lt;/b&gt;
        If the file is not an image, an hyperlink is created with the string.
        
        &lt;b&gt;fieldMessage = field_name;&lt;/b&gt;
        Set the attribute "message" with the content of the field whose name is given by field_name.
        
        &lt;b&gt;alt = string;&lt;/b&gt;
        Provide the HTML alt attribute for an image.
        
        &lt;b&gt;fieldAlt = field_name;&lt;/b&gt;
        Set the "alt" attribute with the content of the field whose name is given by field_name.      
      </label>   

      <!-- Forms generator -->
      <label index="formGen.description">Form generator</label>
      <label index="formGen.details">
        This section is used to provide general settings.
        
        &lt;b&gt;Generate form&lt;/b&gt;
        Check the box to use the form generator.
        
        &lt;b&gt;Version x.y.z.&lt;/b&gt;
        This field can be used to set the version of the extension. The format x.y.z should be used.
        You may also automatically upgrade the version when saving.
        
        &lt;b&gt;Additional Code&lt;/b&gt;
        Use this field to add your own php function.

        &lt;b&gt;Additional FlexForm code&lt;/b&gt;
        Use this field to add fexform code to the default flexform configuration for the extension.
      </label>
      
		  <!-- Form queries -->
      <label index="formQueries.description">Form queries</label>
      <label index="formQueries.details">
        This section is used to specify the query associated with your form.
        
        &lt;b&gt;Title&lt;/b&gt;
        Set the name of your query.
        
        &lt;b&gt;Local table&lt;/b&gt; 
        Set the main table that your extension will use. By default, it is the first table in your "New Database Tables" section.
        
        &lt;b&gt;Foreign table&lt;/b&gt; 
        Define here the foreign tables (tables from other extension for exemple) that are needed for your extension (MySQL syntax).
        
        &lt;b&gt;Link&lt;/b&gt; 
        Use this field to set the JOIN operations between your local and foreign tables (MySQL syntax).
        
        &lt;b&gt;Aliases&lt;/b&gt; 
        Define here the aliases associated with your query (MySQL syntax).
        
        &lt;b&gt;Where clause&lt;/b&gt; 
        Define the WHERE clause for query. It can be:
        . a conventional MySQL clause. The tag ###user### can be used. It will be replaced by the user uid.
        . ###group_list = list_of_comma_separed_fe_groups###. To be used with a selector on fe_users. It checks if the user belongs to the group list. 
        . ###group_list != list_of_comma_separed_fe_groups###. To be used with a selector on fe_users. It checks if the user does not belong to the group list. 
        . ###func:WHERE_Clause####. func must be a valid method defined in the tx_savlibrary class. If the method returns true then the WHERE clause is added otherwise it is omitted. The method may have one parameter.
        
        Existing methods are:
          - isInputMode which returns true the form is in the input mode,
          - isNotInpuMode which returns true the form is not in the input mode, 
          - isGroupMember(groupName) which returns true if the user is a member of "groupName",
          - isNotGroupMember(groupName) which returns true if the user is not a member of "groupName".    
              
        Other methods can be added using sav_library_extends).The WHERE_Clause can be any previous cases.
        
        &lt;b&gt;Group clause&lt;/b&gt; 
        GROUP clause for the query. Very useful when MM tables are used (MySQL syntax).
        
        &lt;b&gt;Order clause&lt;/b&gt; 
        ORDER clause for the query (MySQL syntax).   
        
        &lt;b&gt;Where tags&lt;/b&gt; 
        Where tags are a special feature that makes it possible to use hyperlinks with a parameter &amp;where=tagname.  
        The parametre "tagname" should be declared as a php-array with two possibles keys: "where" and "order" defining respectively a WHERE clause and an ORDER clause. Example:
        'myTag' => array(
         'where' => 'myTable.myField > 0',
         'order' => 'myTable.myField desc',
        ),
             
        In any field, if you need to use a php expression, use the syntax {PHP:php_expression}. For example, {PHP:$GLOBALS['TSFE']->id} will be replaced by the page id.                
      </label>
      
      <!-- Forms settings -->
      <label index="forms.description">Form settings</label>
      <label index="forms.details">
        This section is used to specify the settings of your form.
        
        &lt;b&gt;Title&lt;/b&gt;
        Set the name of your form.
        
        &lt;b&gt;Show all view&lt;/b&gt;
        Use the selector to set the "Show all" view that should be used with your form (if any).
        
        &lt;b&gt;Show single view&lt;/b&gt;
        Use the selector to set the "Show single" view that should be used with your form (if any).

        &lt;b&gt;Input view&lt;/b&gt;
        Use the selector to set the "Input" view that should be used with your form (if any).

        &lt;b&gt;Update view&lt;/b&gt;
        Use the selector to set the "Update" view that should be used with your form (if any).

        &lt;b&gt;Query&lt;/b&gt;
        Use the selector to set the "query" that should be used with your form (required).
      </label>

		  <!-- Form views -->
      <label index="formViews.description">Form Views</label>
      <label index="formViews.details">
        This section is used to specify the views associated with your extension.
        
        &lt;b&gt;Title&lt;/b&gt;
        Set the name of your view.
        
        &lt;b&gt;Type of the view&lt;/b&gt;
        Use the selector to set either "Show all", "Show single", "Input form".
        
        &lt;b&gt;ShowAllTitle, ShowSingleTitle, inputTitle&lt;/b&gt;        
        The content will be displayed as the title of the view. if metatags ###fieldname### are used, they will be replaced by the label associated with the fieldname.
        Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
        The tag $$$label[fieldName]$$$ will be replaced by the fieldName title according to the localization.
        
        &lt;b&gt;ShowAllItemTemplate&lt;/b&gt;        
        Template for the "Show all", "Update view" or "Print view". The fields to include are defined using metatags ###fieldname###.
        Metatags ###tablename.fieldname### can also be used. In this case, no processing is performed, the metatag is replaced by the value in the selected row.
        
        Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
        The tag $$$label[fieldName]$$$ will be replaced by the fieldName title according to the localization.
        
        In the case of a view "Update view" or "Print view", tags ###field[field_name, label]### generate the display of the label (localization can be used with $$$tag$$$ or $$$label[fieldName]$$$), the current value of field "field_name" and an input element for update.
        Tags  ###newfield[field_name, label]### generate the display of the label and an input element for the field "field_name". In both cases, label and field will be wrapped with default CSS classes 
        . updateCol1 to updateCol4 for an "Update view" (respectively the label, the previous value, the input value, the checkbox),
        . printCol1 and printCol2 for a "Print view" (respectively the label, the field).
        If you do not want this wrapping, just use $$$label[fieldName]$$$ for the label and ###field[fieldName]### for the field. 
        
        &lt;b&gt;ShowAllItemParentTemplate&lt;/b&gt;       
        This field can be used to change the template of the "Show All" views. The template shoud exist in the template file. By default the predefined template "showAll" is used.
        Setting the value to "showAllAlt" will used the predefined template "showAllAlt" which allows a direct acces to page instead of using only arrows.
        
        
        &lt;b&gt;Folders&lt;/b&gt;
        This field is used to define folders associated with the "Show single" and "Show Input" views. Folders are defined by a semi column-separated list. For example:
        Folder 1; Folder 2; Folder 3; will define three folders respectively named "Folder 1", "Folder 2" and "Folder 3". Parameters can be associated with folders. 
        If "Folder 1", "Folder 2" or "Folder 3" are defined in the file locallang.xml, they will be translated in the selected language.

        Once the extension was saved, the folder order is fixed. 
        To insert a new folder into existing folders, add ###INSERT### in front of the new folder name. 
        To delete an existing folder, add ###DELETE### in front of the folder name. 

        &lt;b&gt;Folder parameters&lt;/b&gt;
        Folder parameters are introduced after the folder name using a column sign ":" as the separator. Each parameter should be under the format:
        parameter=value;
        
        . editAdminPlus = 1;
        Make the folder editable in an input form, if the user has the "Admin+" right. To be an "Admin" user, the user's TSConfig must contain a line as follows:
        extKey_Admin=value 
        where extKey is the extension key and value is one of the possible value of the "Input Admin Field" defined in the flexform associated with the extension.
        The user becomes an "Admin+" user, if his TSConfig contains a line as follows:
        extKey_Admin=value+  
        
        . cutIf = fiedname=value;
        The folder is cut if the field is equal to the given value.
        
        . cutIf = ###group=group_name###;
        The folder is cut if the group name is a valid group for the current record. It checks the usergroup field in the local table if any. 
                   
        . cutIf = ###group!=group_name###;
        The folder is cut if the group name is not a valid group for the current record. It checks the usergroup field in the local table if any.        

        . cutIf = ###usergroup=group_name###;
        The folder is cut if the group name is a valid group for the current user. 
                   
        . cutIf = ###usergroup!=group_name###;
        The folder is cut if the group name is not a valid group for the current user.           

        &lt;b&gt;Print icon&lt;/b&gt; 
        If set, a print icon is added to the view.        
      </label>    
        
      <!-- Forms wizard -->
      <label index="formWizard.description">Wizard settings</label>
      <label index="formWizard.details">
        
        &lt;b&gt;New Version&lt;/b&gt;
        This wizard can be used to automatically ugrade the version of your extension. If you set z, one unit will be added to the z part.
        It you set y, one unit will be added to the y part, while the z part is reset to 0.
        If you set x, one unit, will be added to the x part, while the y and z parts will be reset.
        
        &lt;b&gt;Debug Query&lt;/b&gt;
        Set to display error messages on queries, if any.
                
        Debug options are not saved. They should be used with care. Especially, &lt;b&gt;the Query option should not be left in the final version of your extension for security reasons&lt;/b&gt;.

        &lt;b&gt;Maintenance&lt;/b&gt;
        If set, a maintenance configuration flag will be added in ext_conf_templates.txt. If the configuration flag is set, a maintenance message will be displayed.
        A general maintenance connfiguration flag is availbale with the SAV Library Extension. If set, all extensions generated with the SAV Library will display a maintenance message.

        &lt;b&gt;Generate a new extension&lt;/b&gt;
        This experimental feature makes it possible to generate a new extension from an existing one. 
        Give a new extension and &lt;b&gt;click on "Update result" before clicking on "WRITE".&lt;/b&gt;
      </label>
         
		  <!-- Functions -->
      <label index="functions.description">Functions attributes</label>
			<label index="functions.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="functions.syntax">
      
        Functions are applied to the value of the field. It can be also applied to left and right contents.
        In this case, "Left" or "Right" should be added to the function anme and theoptional attributes.
      
        &lt;b&gt;func = makeDateFormat;&lt;/b&gt;
        This function generates a format for a unix time stamp date.
        Optional attributes can be added:
        . format = string; The string should be a format that makes sense for the php-function strftime().

        &lt;b&gt;func = makeImage;&lt;/b&gt;
        This function builds an IMG tag where the field value is the name of the image file.
        Additional parameter can be used.
        . folder = string; (string will be the folder where the file should be);
        . width = integer; (width of the image in pixels);
        . height = integer; (height of the image in pixels);
        . alt = string; (string will be the "alt" attribute of the image);
        . fieldAlt = field_name; (the "alt" attribute will be the value of the fieldname for the current record).
        
        &lt;b&gt;func = makeEmailLink;&lt;/b&gt;
        This function generates an email link associated with the field.
        Optional attributes can be added:
        . message = string; Message associated with the link.
        
        &lt;b&gt;func = makeNewWindowLink;&lt;/b&gt;
        This function generates an hyperlink associated with the value of the field which opens a new window. Paramaters are :
        . windowUrl = string; string is the url. The tag ###special[fieldname]### from selectors can be used. This parameter is not necessary if the field is an image.
        Optional attributes can be added:
        . windowText = string; string will be added above the image. The tag ###special[fieldname]### from selectors can be used.
        . windowBodyStyle = string; string will be added as the style attribute to the body html tag. Do not forget to use \; for style attributes, 
        since the semi-colon is use to split field attributes, and do not forget to end your definition by a semi-colon
        Example: windowBodyStyle = fontweight:bold\;font-color:blue\;;
        . message = string; Message associated with the link.

        &lt;b&gt;func = makeItemLink;&lt;/b&gt;
        This function generates an hyperlink associated with the value of the field. It will open the "showSingle" view associated with the selected item.
        Optional attributes can be added:
        . updateForm = 1; makes it possible to open an "update" view instead of the "Show single" view.
        . inputForm = 1; makes it possible to open an "Input form" view instead of the "Show single" view.

        &lt;b&gt;func = makeLink;&lt;/b&gt;
        This function generates an internal link (typolink).
        Optional attributes can be added:
        . folder = string; The string will be the folder where the file should be);
        . target = string; The string defines the target parameter.
        . class = string; Name of the class associated with the link.
        . message = string; Message associated with the link.
        . setUid = integer; the integer defines the page uid associated with the link.
        . valueIsUid = 1; The field value is used as the uid of the page associated with the link.

        &lt;b&gt;func = makeExtLink;&lt;/b&gt;
        This function generates an hyperlink associated with the value of the field. It will open the "showSingle" view associated with the selected item in another extension. The following attributes must be provided:
        . ext = string; (string is the extension name followedby the form name. Example "myext_intranet");
        . pageId = integer; (integer is the page id where the extension is the content element);
        . contentId = integer; (integer is the content id of the extension);
        Optional attributes can be added:
        . page = string; (string is the folder name, if the extension uses serveral folders).
        . setUid = this; The uid of the record to open, is given by the value of the field.
        . restrictLinkTo = ###usergroup=group_name###; the link will be displayed if the user belongs to the group_name
        . restrictLinkTo = ###usergroup!=group_name###; the link will be displayed if the user does not belong to the group_name

        &lt;b&gt;func = makeUrlLink;&lt;/b&gt;
        This function generates a link for an external url.
        Optional attributes can be added:
        . link = string; The string will be used as the link instead of the field value;
        . message = string; Message associated with the link.

        &lt;b&gt;func = makeXmlLabel;&lt;/b&gt;
        This function generates the label from a xml language file. It works with the following parameter:
        . xmlLabel = string; the string is the label definition. For example, assume that the value comes from a selectorbox whose label definition is in the file locallang_db.xml
        in the extension "my_ext". Assume also that the field is "my_field". Then, to obtain the label one has to write xmlLabel = LLL:EXT:my_ext/locallang_db.xml:tx_myext.my_field.I.;        
      </label>
      			
		  <!-- General -->
      <label index="general.description">General Attributes</label>
			<label index="general.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="general.syntax">
        &lt;b&gt;addEdit = 1;&lt;/b&gt; 
        When the field is used in an "Update form" view, it will add an input element for update that can be used with the tag ###field_name_Edit### where "field_name" is the name of the field.
        See also the help for Form views (showAllItemTemplate) to see how to use tags ###field[field_name, label]###. 

        &lt;b&gt;addEditIfNull = 1;&lt;/b&gt; 
        Same as addEdit but the element will be added only if the field is null. 

        &lt;b&gt;addEditIfAdmin = 1;&lt;/b&gt; 
        Same as addEdit but the element will be added only if the user has the input right for the plugin. 
             
        &lt;b&gt;addLeftIfNotNull = string;&lt;/b&gt;
        String will be added to the left if the field value is not null.

        &lt;b&gt;addLeftIfNull = string;&lt;/b&gt;
        String will be added to the left if the field value is null.

        &lt;b&gt;addNewIcon = int;&lt;/b&gt;
        A new icon, will be displayed in front of the field during the number of days given by the int number.
                
        &lt;b&gt;addRighIfNotNull = string;&lt;/b&gt;
        String will be added to the right if the field value is not null.

        &lt;b&gt;addRighIfNull = string;&lt;/b&gt;
        String will be added to the right if the field value is null.

        &lt;b&gt;alias = field_name;&lt;/b&gt;
        The displayed value will be provided by the fieldname value for the current record.
        
        &lt;b&gt;Classes and styles&lt;/b&gt;
        . classLabel = string; The default class "label" associated with the label of the displayed value will be replaced by the string.
        . classValue = string; The default class "value" associated with the displayed value will be replaced by the string.
        . classHTMLTag = string; The string will be added as a class to the HTML tag associated with the displayed item (not always available).
        . styleLabel = string; The string will be added as a style attribute associated with the label of the displayed value.
        . styleValue = string; The string will be added as a style attribute associated with the displayed value.
        . styleHTMLTag = string; The string will be added as a style attribute to the HTML tag associated with the displayed item (not always available).
        
        &lt;b&gt;cutIfNull=1;&lt;/b&gt;
        Cut the field if null.
        
        &lt;b&gt;cutIf=fieldName=value;&lt;/b&gt;
        Cut the field if current value of the field is equal to the given value. The metatags ###user### or ###cruser### (same as user but should be used if a new record is created) will be replaced by the user id.
        
        &lt;b&gt;cutIf=fieldName!=value;&lt;/b&gt;
        Cut the field if current value of the field is not equal to the given value.       

        &lt;b&gt;cutIf=###usergroup=group_name###;&lt;/b&gt;
        The field is cut if the group name is a valid group for the current user. 
                   
        &lt;b&gt;cutIf=###usergroup!=group_name###;&lt;/b&gt;
        The field is cut if the group name is not a valid group for the current user.            
  
        &lt;b&gt;cutIf=###group=group_name###;&lt;/b&gt;
        The field is cut if the group name is a valid group for the current record. It checks the usergroup field in the local table if any.
                   
        &lt;b&gt;cutIf=###group!=group_name###;&lt;/b&gt;
        The field is cut if the group name is not a valid group for the current record. It checks the usergroup field in the local table if any.  
                 
        &lt;b&gt;cutLabel = 1;&lt;/b&gt;
        Cut the label associated with the field.
        
        &lt;b&gt;edit = 0;&lt;/b&gt;
        Make the field not editable in an input form.
        &lt;b&gt;edit=1;&lt;/b&gt;
        Make the field editable in an input form.
        
        &lt;b&gt;editAdminPlus=1;&lt;/b&gt;
        Make the field editable in an input form, if the user has the "Admin+" right. To be an "Admin" user, his TSConfig must contain a line as follows:
        extKey_Admin=value where extKey is the extension key and value is one of the possible value of the "Input Admin Field" defined in the flexform associated with the extension.
        The user becomes an "Admin+" user, if his TSConfig contains a line as follows:
        extKey_Admin=value+

        &lt;b&gt;funcAddLeftIfNotNull = string;&lt;/b&gt;
        String will be added to the left if the result of the applied function "func" is not null.

        &lt;b&gt;funcAddLeftIfNull = string;&lt;/b&gt;
        String will be added to the left if the result of the applied function "func" is null.

        &lt;b&gt;funcAddRightIfNotNull = string;&lt;/b&gt;
        String will be added to the right if the result of the applied function "func" is not null.

        &lt;b&gt;funcAddRightIfNull = string;&lt;/b&gt;
        String will be added to the right if the result of the applied function "func" is null.
        
        &lt;b&gt;fusion = begin;&lt;/b&gt;
        Start the fusion of the field, that is the following fields will be displayed on the same line.
        &lt;b&gt;fusion = end;&lt;/b&gt;
        End the fusion of the field, that is the following field will be displayed on the next line.
        
        &lt;b&gt;label = string;&lt;/b&gt;
        The displayed label will be provided by the string.
        
        &lt;b&gt;mail = 1;&lt;/b&gt;
        A mail will be associated with the field.
        
        If the field is a checkbox, it is used as a flag to verify is the mail has to be sent. Mail information are the following:
        . fieldForCheckMail=field_name; The mail will be sent if the value of the fieldname for the current row is not null. 
        . mailIfFieldSetTo=string; The mail will be sent if the value of the fieldname for the current row was previoulsy null or zero and is set to the given string value. 
        . mailSender=string; mail of the sender. Metatag ###user_email### will be replaced by the user email.
        . mailReceiver=string; mail of the person who will receive the mail and process the information.
        . mailReceiverFromField=field_name; The field_name contains the mail of the person who will receive the mail and process the information.
        . mailReceiverQuery=MySQL_Query; The receiver is obtained from a select query with an alias "value" that will used to retreive the receiver. Example: SELECT email as value from fe_users where ... 
        . mailSubject=string; subject of the mail. Metatags ###fieldname### are allowed and will be replaced by their current value.
        . mailMessage=string, mail message. Metatags ###fieldname### are allowed and will be replaced by their current value. 
        . mailcc=string; if set the string is used as Cc: for the mail.
        Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
        . mailMessageLanguage=string; This parameter will force the language for the message to the value of the string.
        . mailMessageLanguageFromField=fieldname; This parameter will force the language for the message to the value of the field (for example a selector box).
        
        &lt;b&gt;mailAlways = 1;&lt;/b&gt; (mail must be set to 1)
        The mail is always sent when saving. Mail information are the following:
        . mailSender=string; mail of the sender. Metatag ###user_email### will be replaced by the user email.
        . mailReceiver=string; mail of the person who will receive the mail and process the information.
        . mailReceiverFromField=field_name; The field_name contains the mail of the person who will receive the mail and process the information.
        . mailReceiverQuery=MySQL_Query; The receiver is obtained from a select query with an alias "value" that will used to retreive the receiver. Example: SELECT email as value from fe_users where ... 
        . mailSubject=string; subject of the mail. Metatags ###fieldname### are allowed and will be replaced by their current value.
        . mailMessage=string, mail message. Metatags ###fieldname### are allowed and will be replaced by their current value.
        . mailcc=string; if set the string is used as Cc: for the mail.
        Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
        . mailMessageLanguage=string; This parameter will force the language for the message to the value of the string.
        . mailMessageLanguageFromField=fieldname; This parameter will force the language for the message to the value of the field (for example a selector box).
        
        &lt;b&gt;mailAuto = 1;&lt;/b&gt; (mail must be set to 1)
        The mail is sent when saving if the field is not empty and if any field in the form is changed. Mail information are the following:
        . mailSender=string; mail of the sender. Metatag ###user_email### will be replaced by the user email.
        . mailReceiver=string; mail of the person who will receive the mail and process the information.
        . mailReceiverFromField=field_name; The field_name contains the mail of the person who will receive the mail and process the information.
        . mailReceiverQuery=MySQL_Query; The receiver is obtained from a select query with an alias "value" that will used to retreive the receiver. Example: SELECT email as value from fe_users where ... 
        . mailSubject=string; subject of the mail. Metatags ###fieldname### are allowed and will be replaced by their current value.
        . mailMessage=string, mail message. Metatags ###fieldname### are allowed and will be replaced by their current value.
        . mailcc=string; if set the string is used as Cc: for the mail.
        Localization by means of the file locallang.xml can be used with $$$tag$$$ which will be replaced by its value according to the configuration language.
        . mailMessageLanguage=string; This parameter will force the language for the message to the value of the string.
        . mailMessageLanguageFromField=fieldname; This parameter will force the language for the message to the value of the field (for example a selector box).
        
        &lt;b&gt;onLabel = 1;&lt;/b&gt;
        The value will be displayed in place of the label. Not so useful since the label can be cut.

        &lt;b&gt;orderLinkInTitle = 1;&lt;/b&gt;
        If this parameter is set, it makes it possible to generate an hyperlink in the title bar of the "showAll". The hyperlink is asscoiated with the field if the tag ###fieldname###
        is used in the "showAllTitle" section. Order clauses have to be defined in the "Where Tags" section of the "Query Form" with "+" and "-" sign added after "fieldname". 
        Use for example:
          'fieldmane+' => array('order' => 'tablename.fieldname'),
          'fieldmane-' => array('order' => 'tablename.fieldname desc'),

        &lt;b&gt;query = SQL statements;&lt;/b&gt;
        The query will be executed once the input form data have been saved. Therefore, it can only be used with "input" or "update" views.
        It may be useful, for example, to update a specific table when the current data are saved. Several queries can be in the SQL statements. Each query must be separated using "\;".
        Special tags can be used in the statement :
        . ###uid### will be replaced by the current record uid.
        . ###CURRENT_PID### will be replaced by the current page id.
        . ###user### will be replaced by the user id.
        . ###value### will be replaced by the current value for the field.

        &lt;b&gt;queryOnValue = string;&lt;/b&gt;
        The query, as defined above, will be executed if the current field value is equal to the right hand side string.

        &lt;b&gt;queryForEach = field_name;&lt;/b&gt;
        If the field is a true MM relation, the query, as defined above, will be executed for all the record in the relation.
        The special tag ###field_name###, where "field_name" is the field where the relation is defined, can be used to identify the record. It will be replaced by the uid of the associated record.
        
        &lt;b&gt;reqValue = SQL select statement;&lt;/b&gt;
        SQL select statement must have an alias "value" which will be used as the value to display.
        Special tags can be used in the statement :
        . ###uid### will be replaced by the current record uid.
        . ###uidItem### will be replaced by the uid of the current subform item.
        . ###user### will be replaced by the user id.
        . ###row[field_name]### where field_name is the name of a field in the current record, will be replaced by its current value.
        The following example returns the name of the user who has created the current record, assuming that tx_mytable is the local table:
        reqvalue= select name as value 
        from fe_users
        where uid=(select cruser_id from tx_mytable where uid=###uid###);

        &lt;b&gt;setExtendLink = table_name;&lt;/b&gt;
        The table name will be left-joined to existing tables
                
        &lt;b&gt;stdWrapValue = TS syntax;&lt;/b&gt;
        It defines a conventional TS stdWrap property. You can add here full TS syntax. 
        Do not forget that the configuration field is ended by a semi-column, therefore if you need a semi-column in your TS write it “\;”

        &lt;b&gt;verifier = verifier_name;&lt;/b&gt;
        Verifiers can be used to check if a field satisfy a constraint. Each field can have one verifier. Each verifier is associated with a parameter.
        Verifiers can be defined by the user. They must be added in the class tx_savlibrary_verifiers defined in the file: class.tx_savlibrary_verifiers.php.

        The value "verifier_name" can be :
        . isValidPattern
        . isValidLength
        . isValidInterval
 
        &lt;b&gt;verifierParam = param;&lt;/b&gt;
        The value "param"  can be :
        . a regular expression for the verifier "isValidPattern".
        For example /^[A-Za-z0-9_]*$/ will allow any input which contains letters, numbers or underline characters. 
        . an integer value for the verifier "isValidLength".
        . an interval [a, b] where a and b are integers for the verifier "isValidInterval".   
        
        &lt;b&gt;wrapItem = string;&lt;/b&gt;
        The string will be used to wrap the item. The syntax in the same as in TS.

      </label>      
						
		  <!-- input -->
      <label index="input.description">Attributes for "String input"</label>
			<label index="input.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="input.syntax">
        &lt;b&gt;size = number;&lt;/b&gt;
        Size of the field.
      </label>      
			
		  <!-- link -->
      <label index="link.description">Attributes for "Link"</label>
			<label index="link.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="link.syntax">
        &lt;b&gt;generateRTF=1;&lt;/b&gt;
        Set the RTF generator.
        &lt;b&gt;templateRTF=filename;&lt;/b&gt;
        Define the template to be used by the RTF generator. Field tags ###tableName.fieldName### or ###fieldName### (for aliases) can be used.
        &lt;b&gt;saveFileRTF=filename;&lt;/b&gt;
        Name under which the generated file will be saved. Field tags ###tableName.fieldName### or ###fieldName### (for aliases) can be used.
      </label>   
      
      <!-- radio -->
			<label index="radio.description">Attributes for "radio buttons"</label>
			<label index="radio.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
			<label index="radio.syntax">
        &lt;b&gt;cols = number;;&lt;/b&gt;
        Number of columns to display.     
      </label>			

		  <!-- rel -->
      <label index="rel.description">Attributes for "Database relation"</label>
			<label index="rel.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="rel.syntax">
        1) Selectorbox, select global
        
        &lt;b&gt;aliasSelect = field_name;&lt;/b&gt;
        Define an alias used in the SELECT query. Tags ###fieldname### can be used, fieldname must be in the relation table.
        &lt;b&gt;labelSelect = field_name;&lt;/b&gt;
        Define the label from field_name for the selector.
        &lt;b&gt;additionalTableSelect = comma-separated table names;&lt;/b&gt;
        Add the table names in the select query. It can be used when tables need to be joined.
        &lt;b&gt;orderSelect = string;&lt;/b&gt;
        Define the order clause for the selector. In general : field_name [desc].
        &lt;b&gt;whereSelect=string;&lt;/b&gt;      			
        Define the where clause for the selector. It can be:
        . a conventional MySQL clause. 
        - The tag ###user### can be used. It will be replaced by the user uid.
        - The tag ###uid### can be used. it will be replaced by the main current record.
        - The tag ###STORAGE_PID### can be used. It will be replaced by the storage page id.
        . ###group_list = list_of_comma_separed_fe_groups###. To be used with a selector on fe_users. It checks if the user belongs to the group list. 
        . ###group_list != list_of_comma_separed_fe_groups###. To be used with a selector on fe_users. It checks if the user does not belong to the group list. 
        &lt;b&gt;content=SQL select statement;&lt;/b&gt;
        SQL select statement must have an alias "uid" and an alias "label" which will be used as the value to display.
        Special tags can be used in the statement :
        . ###uid### will be replaced by the current record uid.
        . ###uidSelected### will be replaced by the selected item.
        . ###user### will be replaced by the user id.
        . ###cruser### will be replaced by the user id.
        The following example returns a selectorbox with the usernames that are linked with the user by a MM relation :
        content = select fe_users.uid as uid, fe_users.name as label 
        from
          tx_mytable_rel_myfield_mm,fe_users 
	      where
	       tx_mytable_rel_myfields_mm.uid_local=###user### and
	       tx_mytable_rel_myfields_mm.uid_foreign=fe_users.uid
	      order by label;
        &lt;b&gt;separator = string;&lt;/b&gt;
        It should be used when the max number of relations is greater than 1 (not true MM-relation) to replace the default &lt; br /&gt; separator between items in showAll or showSingle views.       
        &lt;b&gt;specialFields = comma-separated list of fields;&lt;/b&gt;
        The value of the field name will be propagated in the ###special[fieldname]### metatag when available.
        &lt;b&gt;singleWindow = 1;&lt;/b&gt;
        In case of a MM relation, a double window is used to select items. When this option is used, a single selectorbox in multiple mode is used.
        &lt;b&gt;overrideEnableFields = 1;&lt;/b&gt;    
        The method enableFields of the class tslib_cObj which filters out records with start/end times or hidden/fe_groups fields is not applied to the query associated with the selectorbox.
        It may be used in specific cases when you needed to retreive all the records.
        
        2) Field with element browser
        
        This type should is used to generate a subform. Special parameters can be added.
        &lt;b&gt;addDelete = 1;&lt;/b&gt;
        A delete icon will be added in front of each item.
        &lt;b&gt;addUpDown = 1;&lt;/b&gt;
        Two buttons (up and down) will be added. They can be used to reorganize the order of the subform items.
        &lt;b&gt;maxSubItems = number;&lt;/b&gt;
        Number of items that will be displayed in the subform. All items are displayed if set to 0. If not set, the "maxitems" value in the TCA, that is the "Max number of relations" in the Kickstarter, is used.
        &lt;b&gt;keepFieldsInSubForm = comma-separated list of fields;&lt;/b&gt;
        The values of the fields (use tableName.fieldName) from the parent form will be kept in the subform. It can be used to deal with these values in the subform.
        If * is used instead of the comma-separated list of fields, all fields are kept.     
        &lt;b&gt;cutNewButtonIfNotSaved = 1;&lt;/b&gt;
        The new button of the subform will be cut if the form in which the subform takes place is not saved.
         &lt;b&gt;labelOnTitle = 1;&lt;/b&gt;
        The label will be displayed in the title of the subform in input mode.       
     </label>

		  <!-- select -->
      <label index="select.description">Attributes for "selectorbox"</label>
			<label index="select.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="select.syntax">
        &lt;b&gt;func = function_name;&lt;/b&gt;
        It associates a function with the selectorbox items. The parameter function_name can be:
        . makeItemLink
        . makeExtLink
        . makeLink
        . makeUrlLink
        . makeEmailLink
        See functions for the associated parameters.

        &lt;b&gt;separator = character or string;&lt;/b&gt;
        It can be used with selector boxes associated with a MM relation to replace the default &lt; br /&gt; separator between items in showAll or showSingle views.       
      </label> 
      
      <!-- ShowOnly -->
      <label index="ShowOnly.description">Attributes for "Not created, only shown in savform"</label>
			<label index="ShowOnly.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
			
		  <!-- textarea -->
      <label index="textarea.description">Attributes for "Textarea"</label>
			<label index="textarea.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="textarea.syntax">
        &lt;b&gt;rows = integer;&lt;/b&gt;
        Define the number of rows  of the textarea. This attribute overwrites the same attribute in the TCA.

        &lt;b&gt;cols = integer;&lt;/b&gt;
        Define the number of cols of the textarea. This attribute overwrites the same attribute in the TCA.
      </label> 
      
		  <!-- textarea_rte -->
      <label index="textarea_rte.description">Attributes for "Textarea with RTE"</label>
			<label index="textarea_rte.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="textarea_rte.syntax">
        &lt;b&gt;width = integer;&lt;/b&gt;
        Define the width of the textarea. This attribute overwrites the same attribute in the TCA.

        &lt;b&gt;height = integer;&lt;/b&gt;
        Define the height of the textarea. This attribute overwrites the same attribute in the TCA.
      </label> 
		</languageKey>






	 <!-- FRENCH LANGUAGE SECTION -->

		<languageKey index="fr" type="array">
			<label index=".description">SAV Library</label>
			<label index=".details">
      </label>

		  <!-- checkbox  -->
			<label index="check.description">Attributes for "checkbox"</label>
			<label index="check.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>		
			<label index="check.syntax">
        &lt;b&gt;doNotDisplayIfNotChecked = 1;&lt;/b&gt;
        Permet de ne pas afficher la valeur de la "Checkbox" (i.e. "Non") lorsqu'elle n'est pas activée (évidemment cela ne s'applique pas lorsque l'on est en mode "edit").                       
      </label>

		  <!-- checkbox - 4 boxes -->
			<label index="check_4.description">Attributs pour "checkbox - 4 boxes"</label>
			<label index="check_4.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
			<label index="check_4.syntax">
        &lt;b&gt;cols = number;&lt;/b&gt;
        Nombre de colonnes à afficher.
        
        &lt;b&gt;nbItems = number;&lt;/b&gt;
        Nombre d'items à afficher.  
        
        &lt;b&gt;doNotDisplayIfNotChecked = 1;&lt;/b&gt;
        Permet de ne pas afficher les "Checkboxes" qui ne sont pas activées (évidemment cela ne s'applique pas lorsque l'on est en mode "edit").                       
      </label>	
      
		  <!-- checkbox - 10 boxes -->
			<label index="check_10.description">Attributs pour "checkbox - 10 boxes"</label>
			<label index="check_10.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
			<label index="check_10.syntax">
        &lt;b&gt;cols = number;&lt;/b&gt;
        Nombre de colonnes à afficher.
        
        &lt;b&gt;nbItems = number;&lt;/b&gt;
        Nombre d'items à afficher.  
        
        &lt;b&gt;doNotDisplayIfNotChecked = 1;&lt;/b&gt;
        Permet de ne pas afficher les "Checkboxes" qui ne sont pas activées (évidemment cela ne s'applique pas lorsque l'on est en mode "edit").                       
      </label>	
      
		  <!-- date -->
      <label index="date.description">Attributs pour "date"</label>
			<label index="date.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="date.syntax">
        &lt;b&gt;format = date_format;&lt;/b&gt;
        Définit un format pour l'affichage d'une date. Le format est le même que celui de la fonction php strftime, e.g. format = %d/%m/%Y;
        
        &lt;b&gt;noDefault = 1;&lt;/b&gt;
        Permet de ne pas afficher, par défaut, la date et l'heure.
      </label>          		
           
		  <!-- datetime -->
      <label index="datetime.description">Attributs pour "datetime"</label>
			<label index="datetime.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="datetime.syntax">
        &lt;b&gt;format = date_format;&lt;/b&gt;
        Définit un format pour l'affichage d'une date. Le format est le même que celui de la fonction php strftime, e.g. format = %d/%m/%Y;
        
        &lt;b&gt;noDefault = 1;&lt;/b&gt;
        Permet de ne pas afficher, par défaut, la date et l'heure.
      </label>      

		  <!-- files -->
      <label index="files.description">Attributs pour "files"</label>
			<label index="files.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="files.syntax">
        &lt;b&gt;addIcon = 1;&lt;/b&gt;
        Ajoute une icône devant l'hyperlien associé au fichier.

        &lt;b&gt;uploadFolder = path;&lt;/b&gt;
        Définit le chemin du répertoire dans lequel l'image est enregistrée. Cet attribut remplace celui défini dans le TCA.
        
        &lt;b&gt;addToUploadFolder = subpath;;&lt;/b&gt;
        Ajoute un sous-répertoire au chemin défini par "uploadFolder".
        
        &lt;b&gt;addToUploadFolderFromField = field_name;&lt;/b&gt;
        Ajoute le contenu du champ dont le nom est "field_name" à l'attribut "uploadFolder" en séparant par un "underscore".
        Exemple : si "field_name" prend la valeur "my_field" et que le contenu du champ "my_field" vaut "123" alors 
        AddToUploadFolderFromField = my_field; ajoutera  "_123" à la valeur de "uploadFolder".        

        &lt;b&gt;size = integer;&lt;/b&gt;
        Définit l'attribut taille. Cet attribut remplace celui défini dans le TCA. 
        
        &lt;b&gt;iframe = 1;&lt;/b&gt;
        Ouvre l'image dans un "iframe".
        
        &lt;b&gt;width = integer;&lt;/b&gt;
        Définit la largeur de l'image ou de l'iframe.
        
        &lt;b&gt;height = integer;&lt;/b&gt;
        Définit la hauteur de l'image ou de l'iframe.
        
        &lt;b&gt;message = string;&lt;/b&gt;
        Si le fichier n'est pas une image, un hyperlien, défini par la chaîne, est créé. 
        
        &lt;b&gt;fieldMessage = field_name;&lt;/b&gt;
        Définit l'attribut "message" avec le contenu du champ dont le nom est "field_name".
        
        &lt;b&gt;alt = string;&lt;/b&gt;
        Définit l'attribut HTML "alt" pour l'image.
        
        &lt;b&gt;fieldAlt = field_name;;&lt;/b&gt;
        Définit l'attribut HTML "alt" à partir du contenu du champdont le nom est "field_name".    
      </label>   

      <!-- Forms generator -->
      <label index="formGen.description">Générateur de formulaire</label>
      <label index="formGen.details">
        Cette partie permet de définir quelques configurations générales.
        
        &lt;b&gt;Generate form&lt;/b&gt;
        Sélectionner pour utiliser le générateur.
        
        &lt;b&gt;Version x.y.z.&lt;/b&gt;
        Ce champ peut être utilisé pour définir la version de l'extension. Le format x.y.z doit être utilisé.
        Vous pouvez aussi faire des montées automatiques de version lors de la sauvegarde.
        
        &lt;b&gt;Additional Code&lt;/b&gt;
        Utiliser ce champ pour ajouter vos propres fonctions php.

        &lt;b&gt;Additional FlexForm code&lt;/b&gt;
        Utiliser ce champ pour ajouter votre code au "flexform" par défaut pour la configuration de l'extension.
      </label>
      
		  <!-- Form queries -->
      <label index="formQueries.description">Form queries</label>
      <label index="formQueries.details">
        Cette section sert à spécifier la requête associée au formulaire.
        
        &lt;b&gt;Title&lt;/b&gt;
        Définit le nom de la requête.
        
        &lt;b&gt;Local table&lt;/b&gt; 
        Définit la table principale que l'extension utilisera. Par défaut, c'est la première table de la section "New Database Tables".
        
        &lt;b&gt;Foreign table&lt;/b&gt; 
        Définit les autres tables (tables relatives à d'autres extensions) qui sont nécessaires pour votre extension (syntaxe MySQL).
        
        &lt;b&gt;Link&lt;/b&gt; 
        Utiliser ce champ pour définir les jointures entre la table locale et les autres tables (syntaxe MySQL).
        
        &lt;b&gt;Aliases&lt;/b&gt; 
        Sert à définir les alias associés à la requête (syntaxe MySQL).
        
        &lt;b&gt;Where clause&lt;/b&gt; 
        Définit la clause WHERE pour la requête. Cela peut être :
        . une clause WHERE en MySQL. Le métatag ###user### peut être utilisé. Il sera remplacé par l'uid de l'utilisateur.
        . ###group_list = list_of_comma_separed_fe_groups###. Pour une utilisation avec un sélecteur sur la table fe_users. Cela vérifie si l'utilisateur appartient à une des groupes de la liste. 
        . ###group_list != list_of_comma_separed_fe_groups###. Pour une utilisation avec un sélecteur sur la table fe_users. Cela vérifie si l'utilisateur n'appartient à aucun groupe de la liste. 
        . ###func:WHERE_Clause####. func doit être une méthode valide définie dans la classe tx_savlibrary. Si la méthode fonctionne retourne "vrai", la clause WHERE est ajoutée sinon elle est omise. La méthode peut avoir un paramètre.
        
        Les méthodes prédéfinies sont :
          - isInputMode retourne vrai si le formulaire est dans le mode de saisie,
          - isNotInpuMode retourne vrai si le formulaire est dans le mode de saisie, 
          - isGroupMember(groupName) retourne vrai si l'utilisateur est un membre du groupe "groupName",
          - isNotGroupMember(groupName) retourne vrai si l'utilisateur n'est pas un membre du groupe "groupName".
             
        D'autres méthodes peuvent être ajoutées avec sav_library_extends. WHERE_Clause peut être un des cas précédents. 
        
        &lt;b&gt;Group clause&lt;/b&gt; 
        Définit une clause GROUP pour la requête. Très utile quand des tables MM sont utilisées (syntaxe MySQL).
        
        &lt;b&gt;Order clause&lt;/b&gt; 
        Définit une clause ORDER pour la requête (syntaxe MySQL). 
        
        &lt;b&gt;Where tags&lt;/b&gt; 
        La section "Where tags" est une partie spécifique qui permet de faire des hyperliens avec un paramètre &amp;where=tagname.  
        Le paramètre "tagname" doit être déclaré comme un "array" php avec deux clés "where" et "order" définissant respectivement une clause WHERE clause et une classe ORDER. Exemple :
        'myTag' => array(
         'where' => 'myTable.myField > 0',
         'order' => 'myTable.myField desc',
        ),  
        
        Dans chaque champ, si vous devez utiliser une expression php, utiliser la syntaxe {PHP:php_expression}. Par exemple, {PHP:$GLOBALS['TSFE']->id} sera remplacé par l'id de la page. 
      </label>
      
      <!-- Forms settings -->
      <label index="forms.description">Form settings</label>
      <label index="forms.details">
        Cette setion permet de spécifier l'organisation de votre "form".
        
        &lt;b&gt;Title&lt;/b&gt;
        Définit le nom de votre "form".
        
        &lt;b&gt;Show all view&lt;/b&gt;
        Utiliser le sélecteur pour choisir la vue de type "Show all", le cas échéant, qui doit être utilisée pour votre "form".
        
        &lt;b&gt;Show single view&lt;/b&gt;
        Utiliser le sélecteur pour choisir la vue de type "Show single", le cas échéant, qui doit être utilisée pour votre "form".

        &lt;b&gt;Input view&lt;/b&gt;
        Utiliser le sélecteur pour choisir la vue de type "Input", le cas échéant, qui doit être utilisée pour votre "form".

        &lt;b&gt;Update view&lt;/b&gt;
        Utiliser le sélecteur pour choisir la vue de type "Update", le cas échéant, qui doit être utilisée pour votre "form".

        &lt;b&gt;Query&lt;/b&gt;
        Utiliser le sélecteur pour choisir la requête qui doit être utilisée pour votre "form". Ce champ est obligatoire.
      </label>

		  <!-- Form views -->
      <label index="formViews.description">Form Views</label>
      <label index="formViews.details">
        Cette section permet de définir les vues associées à votre extension.
        
        &lt;b&gt;Title&lt;/b&gt;
        Définit le nom de votre vue.
        
        &lt;b&gt;Type of the view&lt;/b&gt;
        Utiliser le sélecteur pour définir le type de la vue "Show all", "Show single", "Input form".
        
        &lt;b&gt;ShowAllTitle, ShowSingleTitle, inputTitle&lt;/b&gt;        
        Le contenu de ce champ sera affiché comme titre d'une vue. Si des métatags ###fieldname### sont utilisés, ils seront remplacés par le label qui leur est associé.     
        Le multilinguisme par l'intermédiaire du fichier locallang.xml peut être utilisé avec la syntaxe $$$tag$$$ qui sera remplacée par sa valeur selon le langage utilisé dans la configuration.
        
        &lt;b&gt;ShowAllItemTemplate&lt;/b&gt;  
        Template pour une vue de type "Show all", "Update view" et "Print view". Les champs à inclure sont définis en utilisant les metatags ###fieldname###.
        Les metatags ###tablename.fieldname### peuvent aussi être utilisés. Dans ce cas aucun traitement préalable n'est effectué,le metatag est remplacé par sa valeur pour l'enregistrement courant.

        Le multi-linguisme à l'aide du fichier locallang.xml peu être utilisé avec $$$tag$$$ qui sera remplacé par sa valeur en fonction du langage.
        Le tag $$$label[fieldName]$$$ sera remplacé par le titre du champ "fieldName" en fonction du langage.

        Dans le cas d'une vue de type "Update view" ou "Print view", les tags ###field[field_name, label]### engendrent l'affichage du label (le multi-linguisme peut être utilisé avec $$$tag$$$ or $$$label[fieldName]$$$), de la valeur actuel du champ "field_name" et d'un élément de saisie pour modification.
        De la même manière, les tags ###newfield[field_name, label]### engendrent l'affichage du label et élement de saisie pour le champ "field_name". Dans les deux cas, le label et le champ sont "wrappés" par défaut avec des classes CSS . 
        . updateCol1 à updateCol4 pour une "Update view" (respectivement le label, la valeur précédente value, le champ pour la saisie, la "checkbox"),
        . printCol1 et printCol2 pour une "Print view" (respectivement le label et la valeur).
        Si vous ne voulez pas de ces classes, utilisez simplement $$$label[fieldName]$$$ pour le label et ###field[fieldName]### pour le champ.  
         
        &lt;b&gt;ShowAllItemParentTemplate&lt;/b&gt;      
        Ce champ peut être utilisé pour changer de template pour les vues "Show all". Le template doit exister dans le fichier template. Par défaut le template prédéfinie "showAll" est utilisé.
        En utilisant "showAllAlt" comme valeur, le template prédéfini "showAllAlt" sera utilisé. Il permet un accès direct aux pages à la place de l'utilisation des flêches.
        
        &lt;b&gt;Folders&lt;/b&gt;
        Ce champ est utilisé pour définir les "folders" associés aux vues "Show single" et "Show input". Les "folders" sont définis par une liste séparée par un point virgule.
        Par exemple, Folder 1; Folder 2; Folder 3; définira trois "folders" respectivement nommés "Folder 1", "Folder 2" et "Folder 3". Des paramètres peuvent être associés aux "folders".
        Si "Folder 1", "Folder 2" ou "Folder 3" sont définis dans le fichier locallang.xml, ils seront traduits dans la langue choisie.
        
        Une fois l'extension sauvegardée, l'ordre des folders est fixé.
        Pour insérer un nouveau "folder" entre des "folders" existants, ajouter ###INSERT### devant le nom du folder. 
        Pour supprimer un "folder" existant, ajouter ###DELETE### devant le nom du folder.

        &lt;b&gt;Folder parameters&lt;/b&gt;
        Les paramètres des "folders" peuvent être introduits après le nom du folder en utilisant le signe ":" comme séparateur. Chaque paramètre doit être au format suivant :
        parameter=value;
        
        . editAdminPlus=1;
        Rend le "folder" modifiable dans une vue de type "Input form" si l'utilisateur a le droit "Admin+". Pour être un utilisateur "Admin", le champ TSConfig de l'utilisateur doit contenir une ligne comme suit :
        extKey_Admin=value 
        où "extKey" est la clé d'une extension et "value" est une valeur possible du champ "Input Admin Field" défini dans leflexform associé à l'extension.
        L'utilisateur est "Admin+" si son TSConfig contient une ligne du type :
        extKey_Admin=value+  
        
        . cutIf=fiedname=value;
        L'onglet ne sera pas affiché si le champ est égal à la valeur donnée. 
        
        . cutIf=###group=group_name###;
        L'onglet ne sera pas affiché si le groupe est valide pour l'enrgistrement courant. Pour cela le champ usergroup de la table locale s'il existe.
                   
        . cutIf=###group!=group_name###;
        L'onglet ne sera pas affiché si le groupe n'est pas valide pour l'enrgistrement courant. Pour cela le champ usergroup de la table locale s'il existe.

        . cutIf=###usergroup=group_name###;
        L'onglet ne sera pas affiché si le groupe est valide pour l'utilisateur.
                   
        . cutIf=###usergroup!=group_name###;
        L'onglet ne sera pas affiché si le groupe n'est pas valide pour l'utilisateur.

        &lt;b&gt;Print icon&lt;/b&gt; 
        Si ce champ est sélectionné, une icône pour l'impression sera ajoutée à la vue.
      </label>    
        
      <!-- Forms wizard -->
      <label index="formWizard.description">Wizard settings</label>
      <label index="formWizard.details">
        
        &lt;b&gt;New Version&lt;/b&gt;
        Cet section permet de mettre automatiquement à jour la version de votre extension. En sélectionnant z, une unité sera ajoutée à la partie z.
        En sélectionnant y, une unité sera ajoutée à la partie y et la partie z sera remise à 0.
        En sélectionnant x, une unité sera ajoutée à la partie x et les parties y et z seront remises à 0.
        
        &lt;b&gt;Debug Query&lt;/b&gt;
        Valider pour afficher, le cas échéant, les messages d'erreur relatifs aux requêtes. 
        
        Les options de debug ne sont pas sauvegardées. Elles doivent être utilisées avec prudence. En particulier, &lt;b&gt;l'option Query ne devrait pas être conservée dans la version finale de l'extension pour des raisons de sécurité&lt;/b&gt;.

        &lt;b&gt;Maintenance&lt;/b&gt;
        Si cette option est validée, une configuration pour la maintenance sera ajoutée dans ext_conf_templates.txt. Si la configuration est cochée, un message de maintenance sera affiché.
        Un indicateur général pour la configuration de la maintenance est disponible avec l'extension SAV Library. En le cochant, toutes les extensions engendrées avec SAV Library afficheront un message de maintenance.

        &lt;b&gt;Generate a new extension&lt;/b&gt;
        Cette fonctionnalité expérimentale permet de créer une nouvelle extension à partir d'une extension existante.  
        Donner un nom à la nouvellle extension et &lt;b&gt;cliquer sur "Update result" avant de cliquer sur "WRITE".&lt;/b&gt;
      </label>
         
		  <!-- Functions -->
      <label index="functions.description">Functions attributes</label>
			<label index="functions.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="functions.syntax">

        Les fonctions s'appliquent à la valeur d'un champ. Elles peuvent être aussi appliquées aux contenus de gauche et de droite. 
        Dans ce cas, "Left" ou "Right" doit être ajouté au nom de la fonction et aux paramètres optionnels.
        
        &lt;b&gt;func = makeDateFormat;&lt;/b&gt;
        Cette fonction retourne la valeur formattée d'un "unix timestamp".
        Des paramètres additionnels peuvent être ajoutés :
        . format = string; La chaîne doit être un format compatible avec la fonction php strftime().
      
        &lt;b&gt;func = makeImage;&lt;/b&gt;
        Cette fonction construit un tag IMG où la valeur du champ est le nom du fichier contenant l'image.
        Des paramètres additionnels peuvent être ajoutés :
        . folder = string; (la chaîne définit le répertoire dans lequel le fichier doit se trouver;
        . width = integer; (largeur de l'image en pixels);
        . height = integer; (hauteur de l'image en pixels);
        . alt = string; (la chaîne sera l'attribut "alt" de l'image);
        . fieldAlt = field_name; (l'attribut "alt" sera la valeur du champ "field_name" pour l'enregistrement courant).

        &lt;b&gt;func = makeEmailLink;&lt;/b&gt;
        Cette fonction engendre un lien de type email associé au champ.
        Des attributs optionnels peuvent être ajoutés :
        . message = string; Message associé au lien.
        
        &lt;b&gt;func = makeNewWindowLink;&lt;/b&gt;
        Cette fonction engendre un lien associé avec la valeur du champ. Ce lien ouvre une nouvelle fenêtre. Les paramètres sont : 
        . windowUrl = string; La chaîne est l'url. Le tag ###special[fieldname]### en provenance d'un sélecteur peut être utilisé. Ce paramètre est inutile si le champ est une image.
        Des attributs optionnels peuvent être ajoutés :
        . windowText = string; la chaîne sera ajoutée au dessus de l'image. Le tag ###special[fieldname]### en provenance d'un sélecteur peut être utilisé.
        . windowBodyStyle = string; la chaîne sera ajouté comme valeur à l'attribut de style de la balise body. Ne pas oublier d'utiliser \; pour les attributs de style, 
        car le point-virgule est le séprateur entre les attributs des champs, et ne pas oublier de terminer la définition par un point-virgule
        Exemple: windowBodyStyle = fontweight:bold\;font-color:blue\;;
        . message = string; Message associé au lien.

        &lt;b&gt;func = makeItemLink;&lt;/b&gt;
        Cette fonction engendre un lien associé à la valeur du champ. Cet hyperlien permet d'ouvrir la vue de type "Show single" associée à l'item.
        Des attributs optionnels peuvent être ajoutés :
        . updateForm = 1; permet d'ouvrir une vue de type "update" à la place de la vue de type "Show single".
        . inputForm = 1; permet d'ouvrir une vue de type "Input form" à la place de la vue de type "Show single".
     
        &lt;b&gt;func = makeLink;&lt;/b&gt;
        Cette fonction engendre un lien interne au sens typolink.
        Des attributs optionnels peuvent être ajoutés :
        . folder = string; La chaîne définit le répertoire dans lequel le fichier doit se trouver.
        . target = string; La chaîne définit le paramètre target.
        . class = string; Nom de la classe associée au lien.
        . message = string; Message qui sera associé au lien.
        . setUid = integer; L'entier définit l'ui de la page associé au lien.
        . valueIsUid = 1; La valeur du champ est utilisée comme uid de la page associée au lien.
        
        &lt;b&gt;func = makeExtLink;&lt;/b&gt;
        Cette fonction engendre un lien associé à la valeur du champ. Cet hyperlien permet d'ouvrir lavue de type "Show single" associé à l'item sélectionné mais dans une autre extension. Les attributs suivants doivent être fournis :
        . ext = string; (la chaîne doit être le nom de l'extension suivi du nom de la "form". Exemple "myext_intranet");
        . pageId = integer; (l'entier est l'id de la page où l'extension est l'élément de contenu);
        . contentId = integer; (l'entier est l'id de l'extension, c'est-à-dire son id en tant qu'élément de contenu);
        Des attributs optionnels peuvent être ajoutés :
        . page = string; (La chaîne est le nom d'un "folder" si l'extension utilise plusieurs "folders").
        . setUid = this; (L'uid de l'enregistrement à ouvrir est donné par la valeur du champ).
        . restrictLinkTo = ###usergroup=group_name###; Le lien sera affiché si l'utilisateur appartient au groupe "group_name"
        . restrictLinkTo = ###usergroup!=group_name###; Lelien sera affiché si l'utilisateur n'appartient pas au groupe "group_name"

        &lt;b&gt;func = makeUrlLink;&lt;/b&gt;
        Cette fonction engendre un lien externe
        Des attributs optionnels peuvent être ajoutés :
        . link = string; La chaîne sera utilisée pur le lien à la place de la valeur du champ.
        . message = string; Message associé au lien.
        
        &lt;b&gt;func = makeXmlLabel;&lt;/b&gt;
        Cette fonction engendre un label depuis un fichier de langage xml. Elle fonctionne avec le paramètre suivant:
        . xmlLabel = string; la chaîne est la définition du label.Par exemple, supposons que la value vienne d'un sélecteur dont la définition du label est dans le fichier locallang_db.xml
        dans l'extension "my_ext". Supposons aussi que le champ est "my_field". Pour obtenir le label, il faut écrire xmlLabel = LLL:EXT:my_ext/locallang_db.xml:tx_myext.my_field.I.;
      </label>
      			
		  <!-- General -->
      <label index="general.description">Attributs généraux</label>
			<label index="general.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="general.syntax">
        &lt;b&gt;addEdit = 1;&lt;/b&gt; 
        Quand le champ est utilisé dans une vue "Update form", cela ajoute un élément de saisie pour la mise à jour qui peut être utilisé avec le tag ###field_name_Edit### où "field_name" est le nom du champ.
        Voir aussi l'aide pour Form views (showAllItemTemplate) pour voir comment utiliser les tags ###field[field_name, label]###. 

        &lt;b&gt;addEditIfNull = 1;&lt;/b&gt; 
        Idem que addEdit mais ajoute l'élément que si le champ est "vide". 

        &lt;b&gt;addEditIfAdmin = 1;&lt;/b&gt; 
        Idem que addEdit mais ajoute l'élément que si l'utilisateur a les droits de saisie pour le plugin. 

        &lt;b&gt;addLeftIfNotNull = string;&lt;/b&gt;
        La chaîne sera ajoutée à gauche si la valeur du champ n'est pas nulle.

        &lt;b&gt;addLeftIfNull = string;&lt;/b&gt;
        La chaîne sera ajoutée à gauche si la valeur du champ est nulle.

        &lt;b&gt;addNewIcon = int;&lt;/b&gt;
        Une nouvelle icône sera affichée devant le champ pendant le nombre de jours indiqué par le nombre entier. 
                
        &lt;b&gt;addRighIfNotNull = string;&lt;/b&gt;
        La chaîne sera ajoutée à droite si la valeur du champ n'est pas nulle.
        
        &lt;b&gt;addRighIfNull = string;&lt;/b&gt;
        La chaîne sera ajoutée à droite si la valeur du champ est nulle.

        &lt;b&gt;alias = field_name;&lt;/b&gt;
        La valeur affichée sera fournie par la valeur du champ "field_name" pour l'enregistrement courant.
        
        &lt;b&gt;Classes and styles&lt;/b&gt;
        . classLabel = string; La classe par défaut "label" associée au label sera remplacée par la chaîne.
        . classValue = string; La classe par défaut "value" associé à la valeur affichée sera remplacée par la chaîne.
        . classHTMLTag = string; La chaîne sera ajoutée comme classe à la balise HTML associée à l'item affiché (disponible partiellement).        
        . styleLabel = string; La chaîne sera ajoutée comme un attribut de style au style associé au label.
        . styleValue = string; La chaîne sera ajoutée comme un attribut de style au style associé à la valeur affichée.
        . styleHTMLTag = string; La chaîne sera ajoutée comme un attribut de style à la balise HTML asociée à l'item affiché (disponible partiellement).
        
        &lt;b&gt;cutIfNull = 1;&lt;/b&gt;
        N'affiche pas le champ s'il ne contient aucune valeur.  
        
        &lt;b&gt;cutIf = fieldName=value;&lt;/b&gt;
        N'affiche pas le champ si son contenu est égal à la valeur "value". Les métatags ###user### ou ###cruser### (identique à ###user### mais à utiliser quand un nouveau champ doit être créé) seront remplacés par l'id de l'utilisateur.
        
        &lt;b&gt;cutIf = fieldName!=value;&lt;/b&gt;
        N'affiche pas le champ si son contenu n'est pas égal à la valeur "value".

        &lt;b&gt;cutIf = ###usergroup=group_name###;&lt;/b&gt;
        N'affiche pas le champ si le groupe est un groupe valide pour l'utilisateur.
                   
        &lt;b&gt;cutIf = ###usergroup!=group_name###;&lt;/b&gt;
        N'affiche pas le champ si le groupe n'est pas un groupe valide pour l'utilisateur.
  
        &lt;b&gt;cutIf = ###group=group_name###;&lt;/b&gt;
        N'affiche pas le champ si le groupe est valide pour l'enregistrement courant. La vérification est effectuée à partir du champ "usergroup" de la table locale, s'il existe.
                   
        &lt;b&gt;cutIf = ###group!=group_name###;&lt;/b&gt;
        N'affiche pas le champ si le groupe n'est pas valide pour l'enregistrement courant. La vérification est effectuée à partir du champ "usergroup" de la table locale, s'il existe.
                 
        &lt;b&gt;cutLabel = 1;&lt;/b&gt;
        N'affiche pas le label associé au champ.
        
        &lt;b&gt;edit = 0;&lt;/b&gt;
        Rend le champ non modifiable dans une vue de type "input Form".
        &lt;b&gt;edit=1;&lt;/b&gt;
        Rend le champ modifiable.
        
        &lt;b&gt;editAdminPlus = 1;&lt;/b&gt;
        Rend le champ modifiable dans une vue de type "Input form" si l'utilisateur a le droit "Admin+". Pour être un utilisateur "Admin", le champ TSConfig de l'utilisateur doit contenir une ligne comme suit :
        extKey_Admin=value 
        où "extKey" est la clé d'une extension et "value" est une valeur possible du champ "Input Admin Field" défini dans leflexform associé à l'extension.
        L'utilisateur est "Admin+" si son TSConfig contient une ligne du type :
        extKey_Admin=value+  

        &lt;b&gt;funcAddLeftIfNotNull = string;&lt;/b&gt;
        La chaîne sera ajoutée à gauche si le résultat de la fonction "func" n'est pas nulle.

        &lt;b&gt;funcAddLeftIfNull = string;&lt;/b&gt;
        La chaîne sera ajoutée à gauche si le résultat de la fonction "func" est nulle.

        &lt;b&gt;funcAddRightIfNotNull = string;&lt;/b&gt;
        La chaîne sera ajoutée à droite si le résultat de la fonction "func" n'est pas nulle.

        &lt;b&gt;funcAddRightIfNull = string;&lt;/b&gt;
        La chaîne sera ajoutée à droite si le résultat de la fonction "func" est nulle.

        &lt;b&gt;fusion = begin;&lt;/b&gt;
        Commence la fusion pour le champ,c'est-à-dire que les champs suivants seront affichés sur la même ligne.
        &lt;b&gt;fusion = end;&lt;/b&gt;
        Termine la fusion pour le champ, c'est-à-dire que le champ suivant sera affiché sur la ligne suivante. 
        
        &lt;b&gt;label = string;&lt;/b&gt;
        Le label à afficher sera fourni par la chaîne.
        
        &lt;b&gt;mail = 1;&lt;/b&gt;
        Un mél sera associé au champ.
        
        Si le champ est un "checkbox", il sera utilisé comme comme "flag" pour vérifier si un mél a été envoyé. Les informations relatives au mél sont les suivantes : 
        . fieldForCheckMail=field_name; Le message sera envoyé si la valeur du champ pour l'enregistrement courant n'est pas nulle. 
        . mailIfFieldSetTo=string; The mél sera envoyé si la valeur du champ courant était nulle ou égae à 0 et que le champ est positionné à la valeur fournie par la chaîne. 
        . mailSender=string; Mél de l'envoyeur. Le métatag ###user_email### sera remplacé par le mél de l'utilisateur.
        . mailReceiver=string; Mél du récepteur du message.
        . mailReceiverFromField=field_name; Le champ "field_name" contient le mél de la personne qui doit recevoir le message.
        . mailReceiverQuery=MySQL_Query; Le mél du récepteur est obtenu à l'aide d'une requête SELECt avec un alias "value" qui sera utilisé comme mél du récepteur. Exemple: SELECT email as value from fe_users where ..... 
        . mailSubject=string; Sujet du message. Les métatags ###fieldname### sont autorisés et seront remplacés par leur valeur courante.
        . mailMessage=string, Contenu du message. Les métatags ###fieldname### sont autorisés et seront remplacés par leur valeur courante.
        . mailcc=string; Si cet attribut est utilisé, la chaîne est utilisée comme Cc: dans l'envoi du message.
        Le multilinguisme par l'intermédiaire du fichier locallang.xml peut être utilisé avec la syntaxe $$$tag$$$ qui sera remplacée par sa valeur selon le langage utilisé dans la configuration.
        . mailMessageLanguage=string; Ce paramètre force le langage à la valeur de la chaîne.
        . mailMessageLanguageFromField=fieldname; TCe paramètre force le langage à la valeur du champ (par exemple un sélecteur).
        
        &lt;b&gt;mailAlways = 1;&lt;/b&gt; (l'attribut "mail" doit être à 1)
        Le message sera envoyé lors de la sauvegarde. Les informations relatives au mél sont les suivantes : 
        . mailSender=string; Mél de l'envoyeur. Le métatag ###user_email### sera remplacé par le mél de l'utilisateur.
        . mailReceiver=string; Mél du récepteur du message.
        . mailReceiverFromField=field_name; Le champ "field_name" contient le mél de la personne qui doit recevoir le message.
        . mailReceiverQuery=MySQL_Query; Le mél du récepteur est obtenu à l'aide d'une requête SELECT avec un alias "value" qui sera utilisé comme mél du récepteur. Exemple: SELECT email as value from fe_users where ..... 
        . mailSubject=string; Sujet du message. Les métatags ###fieldname### sont autorisés et seront remplacés par leur valeur courante.
        . mailMessage=string, Contenu du message. Les métatags ###fieldname### sont autorisés et seront remplacés par leur valeur courante.
        . mailcc=string; Si cet attribut est utilisé, la chaîne est utilisée comme Cc: dans l'envoi du message.
        Le multilinguisme par l'intermédiaire du fichier locallang.xml peut être utilisé avec la syntaxe $$$tag$$$ qui sera remplacée par sa valeur selon le langage utilisé dans la configuration.
        . mailMessageLanguage=string; Ce paramètre force le langage à la valeur de la chaîne.
        . mailMessageLanguageFromField=fieldname; TCe paramètre force le langage à la valeur du champ (par exemple un sélecteur).

        &lt;b&gt;mailAuto = 1;&lt;/b&gt; (l'attribut "mail" doit être à 1)
        Le message sera envoyé lors de la sauvegarde si le champ n'est pas vide et si au moins un champ du formulaire a été modifié. Les informations relatives au mél sont les suivantes : 
        . mailSender=string; Mél de l'envoyeur. Le métatag ###user_email### sera remplacé par le mél de l'utilisateur.
        . mailReceiver=string; Mél du récepteur du message.
        . mailReceiverFromField=field_name; Le champ "field_name" contient le mél de la personne qui doit recevoir le message.
        . mailReceiverQuery=MySQL_Query; Le mél du récepteur est obtenu à l'aide d'une requête SELECT avec un alias "value" qui sera utilisé comme mél du récepteur. Exemple: SELECT email as value from fe_users where ..... 
        . mailSubject=string; Sujet du message. Les métatags ###fieldname### sont autorisés et seront remplacés par leur valeur courante.
        . mailMessage=string, Contenu du message. Les métatags ###fieldname### sont autorisés et seront remplacés par leur valeur courante.
        . mailcc=string; Si cet attribut est utilisé, la chaîne est utilisée comme Cc: dans l'envoi du message.
        Le multilinguisme par l'intermédiaire du fichier locallang.xml peut être utilisé avec la syntaxe $$$tag$$$ qui sera remplacée par sa valeur selon le langage utilisé dans la configuration.
        . mailMessageLanguage=string; Ce paramètre force le langage à la valeur de la chaîne.
        . mailMessageLanguageFromField=fieldname; TCe paramètre force le langage à la valeur du champ (par exemple un sélecteur).

        &lt;b&gt;onLabel = 1;&lt;/b&gt;
        La valeur du champ sera affichée à la place du label. Peut-être cette option n'est pas très utile car le label peut être "coupé", i.e. ne pas être affiché.

        &lt;b&gt;orderLinkInTitle = 1;&lt;/b&gt;
        Si ce paramètre est activé, un hyperlien sera engendré dans la barre de titre de la vue "showAll". L'hyperlien est associé au champ si le métatag ###fieldname###
        est utilisé dans la section "showAllTitle". Des clauses ORDER doivent être définies dans la section "Where Tags" de "Query Form" avec les signes "+" et "-" ajoutés après "fieldname". 
        Par exemple, utiliser:
          'fieldmane+' => array('order' => 'tablename.fieldname'),
          'fieldmane-' => array('order' => 'tablename.fieldname desc'),

        &lt;b&gt;query = SQL statements;&lt;/b&gt;
        La requête sera exécutée après l'enregostrement des données. Aussi, ce paramètre ne peut être utilisé qu'avec des vues de type "input" ou "update".
        Cela peut être utile, par exemple, pour mettre à jour une table particulière quand les données courantes ont été sauvées. Plusieurs requêtes puevent être enchaînées. Elles doivent être séparées par "\;".
        Des tags spéciaux peuvent être utilisés dans la requête : 
        . ###uid### sera remplacé par l'uid de l'enregistrement courant.
        . ###CURRENT_PID### sera remplacé par l'uid de la page courante.
        . ###user### sera remplacé par l'id de l'utilisateur.
        . ###value### sera remplacé par la valeur courante du champ.

        &lt;b&gt;queryOnValue = string;&lt;/b&gt;
        La requête, comme définie au dessus, sera exécutée si la valeur courante du champ est égale à la chaîne à droite de l'expression.

        &lt;b&gt;queryForEach = field_name;&lt;/b&gt;
        Si le champ est une véritable relation MM, la requête, comme définie au dessus, sera exécutée pour tous les enregistrements en relation.
        Le tag spécial ###field_name###, où "field_name" est le champ dans lequel est définie la relation, peut être utilisé pour identifier l'enregistrement. Il sera remplacé par l'uid de l'enregistrement associé.

        &lt;b&gt;reqValue = SQL select statement;&lt;/b&gt;
        La requête SELECT doit avoir un alias "value" qui sera utilisé comme valeur à afficher.
        Des tags spéciaux peuvent être utilisés dans la requête : 
        . ###uid### sera remplacé par l'uid de l'enregistrement courant.
        . ###uidItem### sera remplacé par l'uid de l'item courant dans un sous-formulaire.
        . ###user### sera remplacé par l'id de l'utilisateur.
        . ###row[field_name]###, où "field_name" est le nom d'un champ de l'enregistrement courant is the name of a field in the current record, seraremplacé par sa valeur.
        L'exemple suivant retourne le nom de l'utilisateur qui a créé l'enregistrement courant, avec comme hypothèse que tx_mytable est la table locale :
        reqvalue= select name as value 
        from fe_users
        where uid=(select cruser_id from tx_mytable where uid=###uid###);

        &lt;b&gt;setExtendLink = table_name;&lt;/b&gt;
        La table dont le nom est "table_name" sera liée dans une jointure de type LEFT JOIN aux tables existantes.

        &lt;b&gt;stdWrapValue = TS syntax;&lt;/b&gt;
        Exécute le TypoScript d'une propriété stdWrap. Cette propriété peut gérér toute expression TS correctement formée. 
        Ne pas oublier que la configuration d'un champ se termine par un point-virgule. Aussi, si celui-ci est présent dans votre TS, il faut l'écrire "\;".
                
        &lt;b&gt;verifier = verifier_name;&lt;/b&gt;
        Des vérificateurs peuvent être utilisés pour vérifier si un champ satisfait une contrainte. Chaque champ peut avoir un vérificateur. Chaque vérificateur est associé à un paramètre.
        Des nouveaux vérificateurs peuvent être définis. Ils doivent être ajoutés dans la classe tx_savlibrary_verifiers définie dans le fichier : class.tx_savlibrary_verifiers.php.

        La valeur "verifier_name" peut être :
        . isValidPattern
        . isValidLength
        . isValidInterval
 
        &lt;b&gt;verifierParam = param;&lt;/b&gt;
        La valeur de "param" peut être :
        . une expression régulière pour le vérificateur "isValidPattern".
        Par exemple /^[A-Za-z0-9_]*$/ autorisera une saisie qui contient des lettres, des nombres et des "underscores". 
        . un entier pour le vérificateur "isValidLength".
        . un intervalle [a, b] où a et b sont des entiers pour le vérificateur "isValidInterval".    
        
        &lt;b&gt;wrapItem = string;&lt;/b&gt;
        La chaîne sera utilisée pour "wrapper" l'élément. La syntaxe est celle du TS.
           
      </label>      
			
		  <!-- input -->
      <label index="input.description">Attributs pour "String input"</label>
			<label index="input.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="input.syntax">
        &lt;b&gt;size = number;&lt;/b&gt;
        Définit la taille du champ.
      </label>      
			
		  <!-- link -->
      <label index="link.description">Attributs pour "Link"</label>
			<label index="link.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="link.syntax">
        &lt;b&gt;generateRTF=1;&lt;/b&gt;
        Active le générateur RTF.
        &lt;b&gt;templateRTF=filename;&lt;/b&gt;
        Définit le template à utiliser par le générateur RTF. Les métatags ###tableName.fieldName### ou ###fieldName### (pour les alias) peuvent être utilisés.
        &lt;b&gt;saveFileRTF=filename;&lt;/b&gt;
        Nom sous lequel le fichier engendré sera sauvegardé. Les métatags ###tableName.fieldName### ou ###fieldName### (pour les alias) peuvent être utilisés.
      </label>   
      
      <!-- radio -->
			<label index="radio.description">Attributs pour "radio buttons"</label>
			<label index="radio.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
			<label index="radio.syntax">
        &lt;b&gt;cols = number;;&lt;/b&gt;
        Nombre de colonnes à afficher. 
      </label>			

		  <!-- rel -->
      <label index="rel.description">Attributs pour "Database relation"</label>
			<label index="rel.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="rel.syntax">
        1) Selectorbox, select global
        
        &lt;b&gt;aliasSelect = field_name;&lt;/b&gt;
        Définit un alias utilisé dans la requête SELECT. Les tags ###fieldname### peuvent être utilisés, "fieldname" doit exister dans la table en relation.
        &lt;b&gt;labelSelect = field_name;&lt;/b&gt;
        Définit le label pour le sélecteur à partir du champ "field_name".
        &lt;b&gt;additionalTableSelect = comma-separated table names;&lt;/b&gt;
        Ajoute les tables dans la partie FROM de la requête. Cela peut être utilisé quand des tables doivent être jointes.
        &lt;b&gt;orderSelect = string;&lt;/b&gt;
        Définit la clause ORDER pour le sélecteur.En général : field_name [desc].
        &lt;b&gt;whereSelect=string;&lt;/b&gt;
        Définit la clause WHERE pour le sélecteur. Cela peut être :      			
        . une clause conventionnelle MySQL. 
        - Le tag ###user### peut être utilisé. Il sera remplacé par l'id de l'utilisateur.
        - Le tag ###uid### peut être utilisé. Il sera remplacé par l'uid de l'enregistrement courant.
        - Le tag ###STORAGE_PID### peut être utilisé. Il sera remplacé par l'id de la "storage page".
        . ###group_list = list_of_comma_separed_fe_groups###. A utiliser avec un sélecteur sur la table fe_users. Cela vérifie si l'utilisateur appartient à un des groupes de la liste. 
        . ###group_list != list_of_comma_separed_fe_groups###. A utiliser avec un sélecteur sur la table fe_users. Cela vérifie si l'utilisateur n'appartient à aucun groupe de la liste. 
        &lt;b&gt;content=SQL select statement;&lt;/b&gt;
        La requête SQM doit avoir un alias "uid" et un "alias "label" qui seront utilisés pour la valeur à afficher.
        Des tags spéciaux peuvent être utilisés dans cette instruction :
        . ###uid### sera remplacé par l'uid de l'enregistrement courant.
        . ###uidSelected### sera remplacé par l'item sélectionné.
        . ###user### sera remplacé par l'id de l'utilisateur.
        . ###cruser### sera remplacé par l'id de l'utilisateur.
        L'exemple suivant retourne un sélecteur avec les noms d'utilisateur MM en liaison avec l'utilisateur courant :
        content = select fe_users.uid as uid, fe_users.name as label 
        from
          tx_mytable_rel_myfield_mm,fe_users 
	      where
	       tx_mytable_rel_myfields_mm.uid_local=###user### and
	       tx_mytable_rel_myfields_mm.uid_foreign=fe_users.uid
	      order by label;
        &lt;b&gt;separator = string;&lt;/b&gt;
        Cet attribut peut être utilisé quand le nombre de relations est supérieur à 1 (relation MM non véritable) pour remplacer le séparateur par défaut &lt; br /&gt; 
        entre les items dans les vues de type "Show all" et "Show single".       
        &lt;b&gt;specialFields = comma-separated list of fields;&lt;/b&gt;
        La valeur des champs de la liste sera propagée dans le métatag ###special[fieldname]### quand il est utilisable.
        &lt;b&gt;singleWindow = 1;&lt;/b&gt;
        Dans le cas d'une relation MM, une double fenêtre de sélection permet la saisie des items. En utilisant cette option, un seul sélecteur multiple est utilisé.
        &lt;b&gt;overrideEnableFields = 1;&lt;/b&gt;    
        La méthode enableFields de la classe tslib_cObj qui filtre les enregistrements avec les champs start/end et hidden/fe_groups n'est pas appliquée à la requête associée au sélecteur.
        Cela peut être utilisé dans des cas spécifiques quand il est nécessaire de retrouver tous les enregistrements.
        
        2) Field with element browser
        
        Ce type doit être utilisé pour engendrer un sous-formulaire. Des paramètres spéciaux peuvent être ajoutés.
        &lt;b&gt;addDelete = 1;&lt;/b&gt;
        Une icône de suppression sera ajoutée devant chaque item.
        &lt;b&gt;addUpDown = 1;&lt;/b&gt;
        Deux boutons (haut et bas) seront ajoutés. Ils peuvent être utilisés pour réorganiser les items du sous-formulaire.
        &lt;b&gt;maxSubItems = number;&lt;/b&gt;
        Nombre d'items qui seront affichés dans le sous-formulaire. Tous les items sont affichés si la valeur est 0. Si ce attribut n'est pas utilisé, la valeur "maxitems" le TCA, c'est-à-dire "Max number of relations" dans le Kickstarter, sera prise en compte.
        &lt;b&gt;keepFieldsInSubForm = comma-separated list of fields;&lt;/b&gt;
        Les valeurs des champs (utiliser tableName.fieldName) dans le formulaire parent seront conservés dans le sous-formulaire. Cela peut être utilisé pour traiter ces valeurs dans le sous-formulaire.
        Si * est utilisé à la place de la liste (la virgule est le séparateur),  tous les champs sont conservés.
        &lt;b&gt;cutNewButtonIfNotSaved = 1;&lt;/b&gt;
        Le boutton nouveau du sous-formulaire ne sera pas affiché si le formulaire dans lequel le sous-formulaire est inséré n'a pas été sauvegardé.
        &lt;b&gt;labelOnTitle = 1;&lt;/b&gt;
        Le label sera affiché dans la barre titre d'un sous-formulaire dans le mode saisie.
     </label>

		  <!-- select -->
      <label index="select.description">Attributs pour "selectorbox"</label>
			<label index="select.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="select.syntax">
        &lt;b&gt;func = function_name;&lt;/b&gt;
        Associe une fonction aux items d'un sélecteur. Le paramètre function_name peut être :
        . makeItemLink
        . makeExtLink
        . makeLink
        . makeUrlLink
        . makeEmailLink
        Voir les fonctions pour connaître les paramètres associés.

        &lt;b&gt;separator = character or string;&lt;/b&gt;
        Peut être utilisé avec des sélecteurs associés aux relations MM pour remplacer le séparateur par défaut &lt; br /&gt; entre les items dans les vues "Show all" et "Show single".
      </label> 
      
      <!-- ShowOnly -->
      <label index="ShowOnly.description">Attributs pour "Not created, only shown in savform"</label>
			<label index="ShowOnly.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      			
		  <!-- textarea -->
      <label index="textarea.description">Attributs pour "Textarea"</label>
			<label index="textarea.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="textarea.syntax">
        &lt;b&gt;rows = integer;&lt;/b&gt;
        Définit le nombre de lignes du "textarea". Cet attribut remplace celui défini dans le TCA.

        &lt;b&gt;cols = integer;&lt;/b&gt;
        Définit le nombre de colonnes du "textarea". Cet attribut remplace celui défini dans le TCA.
      </label> 
      
		  <!-- textarea_rte -->
      <label index="textarea_rte.description">Attributs pour "Textarea with RTE"</label>
			<label index="textarea_rte.seeAlso">sav_library:all,sav_library:functions,sav_library:general</label>
      <label index="textarea_rte.syntax">
        &lt;b&gt;width = integer;&lt;/b&gt;
        Définit la largeur du "textarea". Cet attribut remplace celui défini dans le TCA.
        
        &lt;b&gt;height = integer;&lt;/b&gt;
        Définit la hauteur du "textarea". Cet attribut remplace celui défini dans le TCA.
      </label> 	
		</languageKey>
	</data>
</T3locallang>



